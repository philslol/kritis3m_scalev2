// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: control_plane.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlPlane_UpdateNode_FullMethodName  = "/control_service.ControlPlane/UpdateNode"
	ControlPlane_UpdateFleet_FullMethodName = "/control_service.ControlPlane/UpdateFleet"
	ControlPlane_Hello_FullMethodName       = "/control_service.ControlPlane/hello"
	ControlPlane_Log_FullMethodName         = "/control_service.ControlPlane/log"
)

// ControlPlaneClient is the client API for ControlPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlPlaneClient interface {
	UpdateNode(ctx context.Context, in *NodeUpdate, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UpdateResponse], error)
	UpdateFleet(ctx context.Context, in *FleetUpdate, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FleetResponse], error)
	Hello(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	Log(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogResponse], error)
}

type controlPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneClient(cc grpc.ClientConnInterface) ControlPlaneClient {
	return &controlPlaneClient{cc}
}

func (c *controlPlaneClient) UpdateNode(ctx context.Context, in *NodeUpdate, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UpdateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlPlane_ServiceDesc.Streams[0], ControlPlane_UpdateNode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NodeUpdate, UpdateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlPlane_UpdateNodeClient = grpc.ServerStreamingClient[UpdateResponse]

func (c *controlPlaneClient) UpdateFleet(ctx context.Context, in *FleetUpdate, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FleetResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlPlane_ServiceDesc.Streams[1], ControlPlane_UpdateFleet_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FleetUpdate, FleetResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlPlane_UpdateFleetClient = grpc.ServerStreamingClient[FleetResponse]

func (c *controlPlaneClient) Hello(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlPlane_ServiceDesc.Streams[2], ControlPlane_Hello_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[empty.Empty, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlPlane_HelloClient = grpc.ServerStreamingClient[HelloResponse]

func (c *controlPlaneClient) Log(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlPlane_ServiceDesc.Streams[3], ControlPlane_Log_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[empty.Empty, LogResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlPlane_LogClient = grpc.ServerStreamingClient[LogResponse]

// ControlPlaneServer is the server API for ControlPlane service.
// All implementations must embed UnimplementedControlPlaneServer
// for forward compatibility.
type ControlPlaneServer interface {
	UpdateNode(*NodeUpdate, grpc.ServerStreamingServer[UpdateResponse]) error
	UpdateFleet(*FleetUpdate, grpc.ServerStreamingServer[FleetResponse]) error
	Hello(*empty.Empty, grpc.ServerStreamingServer[HelloResponse]) error
	Log(*empty.Empty, grpc.ServerStreamingServer[LogResponse]) error
	mustEmbedUnimplementedControlPlaneServer()
}

// UnimplementedControlPlaneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlPlaneServer struct{}

func (UnimplementedControlPlaneServer) UpdateNode(*NodeUpdate, grpc.ServerStreamingServer[UpdateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedControlPlaneServer) UpdateFleet(*FleetUpdate, grpc.ServerStreamingServer[FleetResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateFleet not implemented")
}
func (UnimplementedControlPlaneServer) Hello(*empty.Empty, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedControlPlaneServer) Log(*empty.Empty, grpc.ServerStreamingServer[LogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedControlPlaneServer) mustEmbedUnimplementedControlPlaneServer() {}
func (UnimplementedControlPlaneServer) testEmbeddedByValue()                      {}

// UnsafeControlPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServer will
// result in compilation errors.
type UnsafeControlPlaneServer interface {
	mustEmbedUnimplementedControlPlaneServer()
}

func RegisterControlPlaneServer(s grpc.ServiceRegistrar, srv ControlPlaneServer) {
	// If the following call pancis, it indicates UnimplementedControlPlaneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlPlane_ServiceDesc, srv)
}

func _ControlPlane_UpdateNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeUpdate)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlPlaneServer).UpdateNode(m, &grpc.GenericServerStream[NodeUpdate, UpdateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlPlane_UpdateNodeServer = grpc.ServerStreamingServer[UpdateResponse]

func _ControlPlane_UpdateFleet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FleetUpdate)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlPlaneServer).UpdateFleet(m, &grpc.GenericServerStream[FleetUpdate, FleetResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlPlane_UpdateFleetServer = grpc.ServerStreamingServer[FleetResponse]

func _ControlPlane_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlPlaneServer).Hello(m, &grpc.GenericServerStream[empty.Empty, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlPlane_HelloServer = grpc.ServerStreamingServer[HelloResponse]

func _ControlPlane_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlPlaneServer).Log(m, &grpc.GenericServerStream[empty.Empty, LogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlPlane_LogServer = grpc.ServerStreamingServer[LogResponse]

// ControlPlane_ServiceDesc is the grpc.ServiceDesc for ControlPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control_service.ControlPlane",
	HandlerType: (*ControlPlaneServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateNode",
			Handler:       _ControlPlane_UpdateNode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateFleet",
			Handler:       _ControlPlane_UpdateFleet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "hello",
			Handler:       _ControlPlane_Hello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "log",
			Handler:       _ControlPlane_Log_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control_plane.proto",
}
