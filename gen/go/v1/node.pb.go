// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.12.4
// source: node.proto

package v1

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProxyType int32

const (
	ProxyType_PROXY_TYPE_UNSPECIFIED ProxyType = 0
	ProxyType_FORWARD                ProxyType = 1
	ProxyType_REVERSE                ProxyType = 2
	ProxyType_TLSTLS                 ProxyType = 3
)

// Enum value maps for ProxyType.
var (
	ProxyType_name = map[int32]string{
		0: "PROXY_TYPE_UNSPECIFIED",
		1: "FORWARD",
		2: "REVERSE",
		3: "TLSTLS",
	}
	ProxyType_value = map[string]int32{
		"PROXY_TYPE_UNSPECIFIED": 0,
		"FORWARD":                1,
		"REVERSE":                2,
		"TLSTLS":                 3,
	}
)

func (x ProxyType) Enum() *ProxyType {
	p := new(ProxyType)
	*p = x
	return p
}

func (x ProxyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxyType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[0].Descriptor()
}

func (ProxyType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[0]
}

func (x ProxyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProxyType.Descriptor instead.
func (ProxyType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0}
}

type AslKeyexchangeMethod int32

const (
	AslKeyexchangeMethod_ASL_KEX_DEFAULT                  AslKeyexchangeMethod = 0
	AslKeyexchangeMethod_ASL_KEX_CLASSIC_SECP256          AslKeyexchangeMethod = 1
	AslKeyexchangeMethod_ASL_KEX_CLASSIC_SECP384          AslKeyexchangeMethod = 2
	AslKeyexchangeMethod_ASL_KEX_CLASSIC_SECP521          AslKeyexchangeMethod = 3
	AslKeyexchangeMethod_ASL_KEX_CLASSIC_X25519           AslKeyexchangeMethod = 4
	AslKeyexchangeMethod_ASL_KEX_CLASSIC_X448             AslKeyexchangeMethod = 5
	AslKeyexchangeMethod_ASL_KEX_PQC_MLKEM512             AslKeyexchangeMethod = 6
	AslKeyexchangeMethod_ASL_KEX_PQC_MLKEM768             AslKeyexchangeMethod = 7
	AslKeyexchangeMethod_ASL_KEX_PQC_MLKEM1024            AslKeyexchangeMethod = 8
	AslKeyexchangeMethod_ASL_KEX_HYBRID_SECP256_MLKEM512  AslKeyexchangeMethod = 9
	AslKeyexchangeMethod_ASL_KEX_HYBRID_SECP384_MLKEM768  AslKeyexchangeMethod = 10
	AslKeyexchangeMethod_ASL_KEX_HYBRID_SECP256_MLKEM768  AslKeyexchangeMethod = 11
	AslKeyexchangeMethod_ASL_KEX_HYBRID_SECP521_MLKEM1024 AslKeyexchangeMethod = 12
	AslKeyexchangeMethod_ASL_KEX_HYBRID_SECP384_MLKEM1024 AslKeyexchangeMethod = 13
	AslKeyexchangeMethod_ASL_KEX_HYBRID_X25519_MLKEM512   AslKeyexchangeMethod = 14
	AslKeyexchangeMethod_ASL_KEX_HYBRID_X448_MLKEM768     AslKeyexchangeMethod = 15
	AslKeyexchangeMethod_ASL_KEX_HYBRID_X25519_MLKEM768   AslKeyexchangeMethod = 16
)

// Enum value maps for AslKeyexchangeMethod.
var (
	AslKeyexchangeMethod_name = map[int32]string{
		0:  "ASL_KEX_DEFAULT",
		1:  "ASL_KEX_CLASSIC_SECP256",
		2:  "ASL_KEX_CLASSIC_SECP384",
		3:  "ASL_KEX_CLASSIC_SECP521",
		4:  "ASL_KEX_CLASSIC_X25519",
		5:  "ASL_KEX_CLASSIC_X448",
		6:  "ASL_KEX_PQC_MLKEM512",
		7:  "ASL_KEX_PQC_MLKEM768",
		8:  "ASL_KEX_PQC_MLKEM1024",
		9:  "ASL_KEX_HYBRID_SECP256_MLKEM512",
		10: "ASL_KEX_HYBRID_SECP384_MLKEM768",
		11: "ASL_KEX_HYBRID_SECP256_MLKEM768",
		12: "ASL_KEX_HYBRID_SECP521_MLKEM1024",
		13: "ASL_KEX_HYBRID_SECP384_MLKEM1024",
		14: "ASL_KEX_HYBRID_X25519_MLKEM512",
		15: "ASL_KEX_HYBRID_X448_MLKEM768",
		16: "ASL_KEX_HYBRID_X25519_MLKEM768",
	}
	AslKeyexchangeMethod_value = map[string]int32{
		"ASL_KEX_DEFAULT":                  0,
		"ASL_KEX_CLASSIC_SECP256":          1,
		"ASL_KEX_CLASSIC_SECP384":          2,
		"ASL_KEX_CLASSIC_SECP521":          3,
		"ASL_KEX_CLASSIC_X25519":           4,
		"ASL_KEX_CLASSIC_X448":             5,
		"ASL_KEX_PQC_MLKEM512":             6,
		"ASL_KEX_PQC_MLKEM768":             7,
		"ASL_KEX_PQC_MLKEM1024":            8,
		"ASL_KEX_HYBRID_SECP256_MLKEM512":  9,
		"ASL_KEX_HYBRID_SECP384_MLKEM768":  10,
		"ASL_KEX_HYBRID_SECP256_MLKEM768":  11,
		"ASL_KEX_HYBRID_SECP521_MLKEM1024": 12,
		"ASL_KEX_HYBRID_SECP384_MLKEM1024": 13,
		"ASL_KEX_HYBRID_X25519_MLKEM512":   14,
		"ASL_KEX_HYBRID_X448_MLKEM768":     15,
		"ASL_KEX_HYBRID_X25519_MLKEM768":   16,
	}
)

func (x AslKeyexchangeMethod) Enum() *AslKeyexchangeMethod {
	p := new(AslKeyexchangeMethod)
	*p = x
	return p
}

func (x AslKeyexchangeMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AslKeyexchangeMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[1].Descriptor()
}

func (AslKeyexchangeMethod) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[1]
}

func (x AslKeyexchangeMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AslKeyexchangeMethod.Descriptor instead.
func (AslKeyexchangeMethod) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{1}
}

type VersionState int32

const (
	VersionState_DRAFT              VersionState = 0
	VersionState_PENDING_DEPLOYMENT VersionState = 1
	VersionState_ACTIVE             VersionState = 2
	VersionState_DISABLED           VersionState = 3
)

// Enum value maps for VersionState.
var (
	VersionState_name = map[int32]string{
		0: "DRAFT",
		1: "PENDING_DEPLOYMENT",
		2: "ACTIVE",
		3: "DISABLED",
	}
	VersionState_value = map[string]int32{
		"DRAFT":              0,
		"PENDING_DEPLOYMENT": 1,
		"ACTIVE":             2,
		"DISABLED":           3,
	}
)

func (x VersionState) Enum() *VersionState {
	p := new(VersionState)
	*p = x
	return p
}

func (x VersionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VersionState) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[2].Descriptor()
}

func (VersionState) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[2]
}

func (x VersionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersionState.Descriptor instead.
func (VersionState) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{2}
}

type ActivateNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  string                 `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	SerialNumber  string                 `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateNodeRequest) Reset() {
	*x = ActivateNodeRequest{}
	mi := &file_node_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateNodeRequest) ProtoMessage() {}

func (x *ActivateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateNodeRequest.ProtoReflect.Descriptor instead.
func (*ActivateNodeRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0}
}

func (x *ActivateNodeRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *ActivateNodeRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type ActivateFleetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  string                 `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	GroupName     *string                `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3,oneof" json:"group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateFleetRequest) Reset() {
	*x = ActivateFleetRequest{}
	mi := &file_node_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateFleetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateFleetRequest) ProtoMessage() {}

func (x *ActivateFleetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateFleetRequest.ProtoReflect.Descriptor instead.
func (*ActivateFleetRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{1}
}

func (x *ActivateFleetRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *ActivateFleetRequest) GetGroupName() string {
	if x != nil && x.GroupName != nil {
		return *x.GroupName
	}
	return ""
}

type ActivateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Retcode       int32                  `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	Metadata      *_struct.Struct        `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateResponse) Reset() {
	*x = ActivateResponse{}
	mi := &file_node_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateResponse) ProtoMessage() {}

func (x *ActivateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateResponse.ProtoReflect.Descriptor instead.
func (*ActivateResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{2}
}

func (x *ActivateResponse) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *ActivateResponse) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SerialNumber  string                 `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	NetworkIndex  int32                  `protobuf:"varint,3,opt,name=network_index,json=networkIndex,proto3" json:"network_index,omitempty"`
	Locality      string                 `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	LastSeen      *timestamp.Timestamp   `protobuf:"bytes,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	VersionSetId  string                 `protobuf:"bytes,6,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_node_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Node) GetNetworkIndex() int32 {
	if x != nil {
		return x.NetworkIndex
	}
	return 0
}

func (x *Node) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *Node) GetLastSeen() *timestamp.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Node) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

type NodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *Node                  `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Proxy         []*Proxy               `protobuf:"bytes,2,rep,name=proxy,proto3" json:"proxy,omitempty"`
	HwConfigs     []*HardwareConfig      `protobuf:"bytes,3,rep,name=hw_configs,json=hwConfigs,proto3" json:"hw_configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeResponse) Reset() {
	*x = NodeResponse{}
	mi := &file_node_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResponse) ProtoMessage() {}

func (x *NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResponse.ProtoReflect.Descriptor instead.
func (*NodeResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{4}
}

func (x *NodeResponse) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeResponse) GetProxy() []*Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *NodeResponse) GetHwConfigs() []*HardwareConfig {
	if x != nil {
		return x.HwConfigs
	}
	return nil
}

type CreateNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber  string                 `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	NetworkIndex  int32                  `protobuf:"varint,2,opt,name=network_index,json=networkIndex,proto3" json:"network_index,omitempty"`
	Locality      *string                `protobuf:"bytes,3,opt,name=locality,proto3,oneof" json:"locality,omitempty"`
	VersionSetId  string                 `protobuf:"bytes,4,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	User          string                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNodeRequest) Reset() {
	*x = CreateNodeRequest{}
	mi := &file_node_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeRequest) ProtoMessage() {}

func (x *CreateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNodeRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CreateNodeRequest) GetNetworkIndex() int32 {
	if x != nil {
		return x.NetworkIndex
	}
	return 0
}

func (x *CreateNodeRequest) GetLocality() string {
	if x != nil && x.Locality != nil {
		return *x.Locality
	}
	return ""
}

func (x *CreateNodeRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *CreateNodeRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type NodeNameQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  string                 `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	SerialNumber  string                 `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeNameQuery) Reset() {
	*x = NodeNameQuery{}
	mi := &file_node_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeNameQuery) ProtoMessage() {}

func (x *NodeNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeNameQuery.ProtoReflect.Descriptor instead.
func (*NodeNameQuery) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{6}
}

func (x *NodeNameQuery) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *NodeNameQuery) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type GetNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*GetNodeRequest_Id
	//	*GetNodeRequest_NodeQuery
	Query         isGetNodeRequest_Query `protobuf_oneof:"query"`
	Include       *bool                  `protobuf:"varint,3,opt,name=include,proto3,oneof" json:"include,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeRequest) Reset() {
	*x = GetNodeRequest{}
	mi := &file_node_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRequest) ProtoMessage() {}

func (x *GetNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRequest.ProtoReflect.Descriptor instead.
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{7}
}

func (x *GetNodeRequest) GetQuery() isGetNodeRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetNodeRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*GetNodeRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *GetNodeRequest) GetNodeQuery() *NodeNameQuery {
	if x != nil {
		if x, ok := x.Query.(*GetNodeRequest_NodeQuery); ok {
			return x.NodeQuery
		}
	}
	return nil
}

func (x *GetNodeRequest) GetInclude() bool {
	if x != nil && x.Include != nil {
		return *x.Include
	}
	return false
}

type isGetNodeRequest_Query interface {
	isGetNodeRequest_Query()
}

type GetNodeRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type GetNodeRequest_NodeQuery struct {
	NodeQuery *NodeNameQuery `protobuf:"bytes,2,opt,name=node_query,json=nodeQuery,proto3,oneof"`
}

func (*GetNodeRequest_Id) isGetNodeRequest_Query() {}

func (*GetNodeRequest_NodeQuery) isGetNodeRequest_Query() {}

type ListNodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  *string                `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3,oneof" json:"version_set_id,omitempty"`
	Include       *bool                  `protobuf:"varint,2,opt,name=include,proto3,oneof" json:"include,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	mi := &file_node_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{8}
}

func (x *ListNodesRequest) GetVersionSetId() string {
	if x != nil && x.VersionSetId != nil {
		return *x.VersionSetId
	}
	return ""
}

func (x *ListNodesRequest) GetInclude() bool {
	if x != nil && x.Include != nil {
		return *x.Include
	}
	return false
}

type ListNodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*NodeResponse        `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	mi := &file_node_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{9}
}

func (x *ListNodesResponse) GetNodes() []*NodeResponse {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type UpdateNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*UpdateNodeRequest_Id
	//	*UpdateNodeRequest_NodeQuery
	Query         isUpdateNodeRequest_Query `protobuf_oneof:"query"`
	NetworkIndex  *int32                    `protobuf:"varint,4,opt,name=network_index,json=networkIndex,proto3,oneof" json:"network_index,omitempty"`
	Locality      *string                   `protobuf:"bytes,5,opt,name=locality,proto3,oneof" json:"locality,omitempty"`
	LastSeen      *timestamp.Timestamp      `protobuf:"bytes,6,opt,name=last_seen,json=lastSeen,proto3,oneof" json:"last_seen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNodeRequest) Reset() {
	*x = UpdateNodeRequest{}
	mi := &file_node_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRequest) ProtoMessage() {}

func (x *UpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateNodeRequest) GetQuery() isUpdateNodeRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UpdateNodeRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*UpdateNodeRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *UpdateNodeRequest) GetNodeQuery() *NodeNameQuery {
	if x != nil {
		if x, ok := x.Query.(*UpdateNodeRequest_NodeQuery); ok {
			return x.NodeQuery
		}
	}
	return nil
}

func (x *UpdateNodeRequest) GetNetworkIndex() int32 {
	if x != nil && x.NetworkIndex != nil {
		return *x.NetworkIndex
	}
	return 0
}

func (x *UpdateNodeRequest) GetLocality() string {
	if x != nil && x.Locality != nil {
		return *x.Locality
	}
	return ""
}

func (x *UpdateNodeRequest) GetLastSeen() *timestamp.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

type isUpdateNodeRequest_Query interface {
	isUpdateNodeRequest_Query()
}

type UpdateNodeRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type UpdateNodeRequest_NodeQuery struct {
	NodeQuery *NodeNameQuery `protobuf:"bytes,2,opt,name=node_query,json=nodeQuery,proto3,oneof"`
}

func (*UpdateNodeRequest_Id) isUpdateNodeRequest_Query() {}

func (*UpdateNodeRequest_NodeQuery) isUpdateNodeRequest_Query() {}

type DeleteNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber  string                 `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	VersionSetId  string                 `protobuf:"bytes,2,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	mi := &file_node_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteNodeRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *DeleteNodeRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

// -------------------------------------ENDPOINTCONFIG------------------------------------
type EndpointConfig struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MutualAuth           bool                   `protobuf:"varint,3,opt,name=mutual_auth,json=mutualAuth,proto3" json:"mutual_auth,omitempty"`
	NoEncryption         bool                   `protobuf:"varint,4,opt,name=no_encryption,json=noEncryption,proto3" json:"no_encryption,omitempty"`
	AslKeyExchangeMethod string                 `protobuf:"bytes,5,opt,name=asl_key_exchange_method,json=aslKeyExchangeMethod,proto3" json:"asl_key_exchange_method,omitempty"`
	Cipher               *string                `protobuf:"bytes,6,opt,name=cipher,proto3,oneof" json:"cipher,omitempty"`
	VersionSetId         string                 `protobuf:"bytes,7,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	State                string                 `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	CreatedBy            string                 `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EndpointConfig) Reset() {
	*x = EndpointConfig{}
	mi := &file_node_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointConfig) ProtoMessage() {}

func (x *EndpointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointConfig.ProtoReflect.Descriptor instead.
func (*EndpointConfig) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{12}
}

func (x *EndpointConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EndpointConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EndpointConfig) GetMutualAuth() bool {
	if x != nil {
		return x.MutualAuth
	}
	return false
}

func (x *EndpointConfig) GetNoEncryption() bool {
	if x != nil {
		return x.NoEncryption
	}
	return false
}

func (x *EndpointConfig) GetAslKeyExchangeMethod() string {
	if x != nil {
		return x.AslKeyExchangeMethod
	}
	return ""
}

func (x *EndpointConfig) GetCipher() string {
	if x != nil && x.Cipher != nil {
		return *x.Cipher
	}
	return ""
}

func (x *EndpointConfig) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *EndpointConfig) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *EndpointConfig) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type EndpointConfigNameQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  string                 `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndpointConfigNameQuery) Reset() {
	*x = EndpointConfigNameQuery{}
	mi := &file_node_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointConfigNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointConfigNameQuery) ProtoMessage() {}

func (x *EndpointConfigNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointConfigNameQuery.ProtoReflect.Descriptor instead.
func (*EndpointConfigNameQuery) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{13}
}

func (x *EndpointConfigNameQuery) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *EndpointConfigNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateEndpointConfigRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MutualAuth           bool                   `protobuf:"varint,2,opt,name=mutual_auth,json=mutualAuth,proto3" json:"mutual_auth,omitempty"`
	NoEncryption         bool                   `protobuf:"varint,3,opt,name=no_encryption,json=noEncryption,proto3" json:"no_encryption,omitempty"`
	AslKeyExchangeMethod AslKeyexchangeMethod   `protobuf:"varint,4,opt,name=asl_key_exchange_method,json=aslKeyExchangeMethod,proto3,enum=node.AslKeyexchangeMethod" json:"asl_key_exchange_method,omitempty"`
	Cipher               *string                `protobuf:"bytes,5,opt,name=cipher,proto3,oneof" json:"cipher,omitempty"`
	VersionSetId         string                 `protobuf:"bytes,6,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	CreatedBy            string                 `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CreateEndpointConfigRequest) Reset() {
	*x = CreateEndpointConfigRequest{}
	mi := &file_node_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEndpointConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEndpointConfigRequest) ProtoMessage() {}

func (x *CreateEndpointConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEndpointConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateEndpointConfigRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{14}
}

func (x *CreateEndpointConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEndpointConfigRequest) GetMutualAuth() bool {
	if x != nil {
		return x.MutualAuth
	}
	return false
}

func (x *CreateEndpointConfigRequest) GetNoEncryption() bool {
	if x != nil {
		return x.NoEncryption
	}
	return false
}

func (x *CreateEndpointConfigRequest) GetAslKeyExchangeMethod() AslKeyexchangeMethod {
	if x != nil {
		return x.AslKeyExchangeMethod
	}
	return AslKeyexchangeMethod_ASL_KEX_DEFAULT
}

func (x *CreateEndpointConfigRequest) GetCipher() string {
	if x != nil && x.Cipher != nil {
		return *x.Cipher
	}
	return ""
}

func (x *CreateEndpointConfigRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *CreateEndpointConfigRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetEndpointConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*GetEndpointConfigRequest_Id
	//	*GetEndpointConfigRequest_EndpointConfigQuery
	Query         isGetEndpointConfigRequest_Query `protobuf_oneof:"query"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEndpointConfigRequest) Reset() {
	*x = GetEndpointConfigRequest{}
	mi := &file_node_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEndpointConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEndpointConfigRequest) ProtoMessage() {}

func (x *GetEndpointConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEndpointConfigRequest.ProtoReflect.Descriptor instead.
func (*GetEndpointConfigRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{15}
}

func (x *GetEndpointConfigRequest) GetQuery() isGetEndpointConfigRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetEndpointConfigRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*GetEndpointConfigRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *GetEndpointConfigRequest) GetEndpointConfigQuery() *EndpointConfigNameQuery {
	if x != nil {
		if x, ok := x.Query.(*GetEndpointConfigRequest_EndpointConfigQuery); ok {
			return x.EndpointConfigQuery
		}
	}
	return nil
}

type isGetEndpointConfigRequest_Query interface {
	isGetEndpointConfigRequest_Query()
}

type GetEndpointConfigRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type GetEndpointConfigRequest_EndpointConfigQuery struct {
	EndpointConfigQuery *EndpointConfigNameQuery `protobuf:"bytes,2,opt,name=endpoint_config_query,json=endpointConfigQuery,proto3,oneof"`
}

func (*GetEndpointConfigRequest_Id) isGetEndpointConfigRequest_Query() {}

func (*GetEndpointConfigRequest_EndpointConfigQuery) isGetEndpointConfigRequest_Query() {}

type ListEndpointConfigsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  *string                `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3,oneof" json:"version_set_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEndpointConfigsRequest) Reset() {
	*x = ListEndpointConfigsRequest{}
	mi := &file_node_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEndpointConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEndpointConfigsRequest) ProtoMessage() {}

func (x *ListEndpointConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEndpointConfigsRequest.ProtoReflect.Descriptor instead.
func (*ListEndpointConfigsRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{16}
}

func (x *ListEndpointConfigsRequest) GetVersionSetId() string {
	if x != nil && x.VersionSetId != nil {
		return *x.VersionSetId
	}
	return ""
}

type ListEndpointConfigsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Configs       []*EndpointConfig      `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEndpointConfigsResponse) Reset() {
	*x = ListEndpointConfigsResponse{}
	mi := &file_node_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEndpointConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEndpointConfigsResponse) ProtoMessage() {}

func (x *ListEndpointConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEndpointConfigsResponse.ProtoReflect.Descriptor instead.
func (*ListEndpointConfigsResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{17}
}

func (x *ListEndpointConfigsResponse) GetConfigs() []*EndpointConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type UpdateEndpointConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*UpdateEndpointConfigRequest_Id
	//	*UpdateEndpointConfigRequest_EndpointConfigQuery
	Query                isUpdateEndpointConfigRequest_Query `protobuf_oneof:"query"`
	Name                 *string                             `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	MutualAuth           *bool                               `protobuf:"varint,4,opt,name=mutual_auth,json=mutualAuth,proto3,oneof" json:"mutual_auth,omitempty"`
	NoEncryption         *bool                               `protobuf:"varint,5,opt,name=no_encryption,json=noEncryption,proto3,oneof" json:"no_encryption,omitempty"`
	AslKeyExchangeMethod *AslKeyexchangeMethod               `protobuf:"varint,6,opt,name=asl_key_exchange_method,json=aslKeyExchangeMethod,proto3,enum=node.AslKeyexchangeMethod,oneof" json:"asl_key_exchange_method,omitempty"`
	Cipher               *string                             `protobuf:"bytes,7,opt,name=cipher,proto3,oneof" json:"cipher,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateEndpointConfigRequest) Reset() {
	*x = UpdateEndpointConfigRequest{}
	mi := &file_node_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEndpointConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEndpointConfigRequest) ProtoMessage() {}

func (x *UpdateEndpointConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEndpointConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateEndpointConfigRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateEndpointConfigRequest) GetQuery() isUpdateEndpointConfigRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UpdateEndpointConfigRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*UpdateEndpointConfigRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *UpdateEndpointConfigRequest) GetEndpointConfigQuery() *EndpointConfigNameQuery {
	if x != nil {
		if x, ok := x.Query.(*UpdateEndpointConfigRequest_EndpointConfigQuery); ok {
			return x.EndpointConfigQuery
		}
	}
	return nil
}

func (x *UpdateEndpointConfigRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateEndpointConfigRequest) GetMutualAuth() bool {
	if x != nil && x.MutualAuth != nil {
		return *x.MutualAuth
	}
	return false
}

func (x *UpdateEndpointConfigRequest) GetNoEncryption() bool {
	if x != nil && x.NoEncryption != nil {
		return *x.NoEncryption
	}
	return false
}

func (x *UpdateEndpointConfigRequest) GetAslKeyExchangeMethod() AslKeyexchangeMethod {
	if x != nil && x.AslKeyExchangeMethod != nil {
		return *x.AslKeyExchangeMethod
	}
	return AslKeyexchangeMethod_ASL_KEX_DEFAULT
}

func (x *UpdateEndpointConfigRequest) GetCipher() string {
	if x != nil && x.Cipher != nil {
		return *x.Cipher
	}
	return ""
}

type isUpdateEndpointConfigRequest_Query interface {
	isUpdateEndpointConfigRequest_Query()
}

type UpdateEndpointConfigRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type UpdateEndpointConfigRequest_EndpointConfigQuery struct {
	EndpointConfigQuery *EndpointConfigNameQuery `protobuf:"bytes,2,opt,name=endpoint_config_query,json=endpointConfigQuery,proto3,oneof"`
}

func (*UpdateEndpointConfigRequest_Id) isUpdateEndpointConfigRequest_Query() {}

func (*UpdateEndpointConfigRequest_EndpointConfigQuery) isUpdateEndpointConfigRequest_Query() {}

type DeleteEndpointConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEndpointConfigRequest) Reset() {
	*x = DeleteEndpointConfigRequest{}
	mi := &file_node_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEndpointConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEndpointConfigRequest) ProtoMessage() {}

func (x *DeleteEndpointConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEndpointConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteEndpointConfigRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteEndpointConfigRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Group struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LogLevel           int32                  `protobuf:"varint,3,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	EndpointConfigName string                 `protobuf:"bytes,4,opt,name=endpoint_config_name,json=endpointConfigName,proto3" json:"endpoint_config_name,omitempty"`
	LegacyConfigName   *string                `protobuf:"bytes,5,opt,name=legacy_config_name,json=legacyConfigName,proto3,oneof" json:"legacy_config_name,omitempty"`
	VersionSetId       string                 `protobuf:"bytes,7,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	CreatedBy          string                 `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	State              string                 `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Group) Reset() {
	*x = Group{}
	mi := &file_node_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{20}
}

func (x *Group) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetLogLevel() int32 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *Group) GetEndpointConfigName() string {
	if x != nil {
		return x.EndpointConfigName
	}
	return ""
}

func (x *Group) GetLegacyConfigName() string {
	if x != nil && x.LegacyConfigName != nil {
		return *x.LegacyConfigName
	}
	return ""
}

func (x *Group) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *Group) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Group) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type CreateGroupRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LogLevel           int32                  `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	EndpointConfigName string                 `protobuf:"bytes,3,opt,name=endpoint_config_name,json=endpointConfigName,proto3" json:"endpoint_config_name,omitempty"`
	LegacyConfigName   *string                `protobuf:"bytes,4,opt,name=legacy_config_name,json=legacyConfigName,proto3,oneof" json:"legacy_config_name,omitempty"`
	VersionSetId       string                 `protobuf:"bytes,5,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	CreatedBy          string                 `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateGroupRequest) Reset() {
	*x = CreateGroupRequest{}
	mi := &file_node_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRequest) ProtoMessage() {}

func (x *CreateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{21}
}

func (x *CreateGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupRequest) GetLogLevel() int32 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *CreateGroupRequest) GetEndpointConfigName() string {
	if x != nil {
		return x.EndpointConfigName
	}
	return ""
}

func (x *CreateGroupRequest) GetLegacyConfigName() string {
	if x != nil && x.LegacyConfigName != nil {
		return *x.LegacyConfigName
	}
	return ""
}

func (x *CreateGroupRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *CreateGroupRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GroupNameQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  string                 `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	GroupName     string                 `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupNameQuery) Reset() {
	*x = GroupNameQuery{}
	mi := &file_node_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupNameQuery) ProtoMessage() {}

func (x *GroupNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupNameQuery.ProtoReflect.Descriptor instead.
func (*GroupNameQuery) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{22}
}

func (x *GroupNameQuery) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *GroupNameQuery) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type GetGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*GetGroupRequest_Id
	//	*GetGroupRequest_GroupQuery
	//	*GetGroupRequest_VersionSetId
	Query            isGetGroupRequest_Query `protobuf_oneof:"query"`
	IncludeEndpoints bool                    `protobuf:"varint,4,opt,name=include_endpoints,json=includeEndpoints,proto3" json:"include_endpoints,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetGroupRequest) Reset() {
	*x = GetGroupRequest{}
	mi := &file_node_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRequest) ProtoMessage() {}

func (x *GetGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRequest.ProtoReflect.Descriptor instead.
func (*GetGroupRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{23}
}

func (x *GetGroupRequest) GetQuery() isGetGroupRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetGroupRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*GetGroupRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *GetGroupRequest) GetGroupQuery() *GroupNameQuery {
	if x != nil {
		if x, ok := x.Query.(*GetGroupRequest_GroupQuery); ok {
			return x.GroupQuery
		}
	}
	return nil
}

func (x *GetGroupRequest) GetVersionSetId() string {
	if x != nil {
		if x, ok := x.Query.(*GetGroupRequest_VersionSetId); ok {
			return x.VersionSetId
		}
	}
	return ""
}

func (x *GetGroupRequest) GetIncludeEndpoints() bool {
	if x != nil {
		return x.IncludeEndpoints
	}
	return false
}

type isGetGroupRequest_Query interface {
	isGetGroupRequest_Query()
}

type GetGroupRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type GetGroupRequest_GroupQuery struct {
	GroupQuery *GroupNameQuery `protobuf:"bytes,2,opt,name=group_query,json=groupQuery,proto3,oneof"`
}

type GetGroupRequest_VersionSetId struct {
	VersionSetId string `protobuf:"bytes,3,opt,name=version_set_id,json=versionSetId,proto3,oneof"`
}

func (*GetGroupRequest_Id) isGetGroupRequest_Query() {}

func (*GetGroupRequest_GroupQuery) isGetGroupRequest_Query() {}

func (*GetGroupRequest_VersionSetId) isGetGroupRequest_Query() {}

type GroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *Group                 `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Primary       *EndpointConfig        `protobuf:"bytes,2,opt,name=primary,proto3,oneof" json:"primary,omitempty"`
	Legacy        *EndpointConfig        `protobuf:"bytes,3,opt,name=legacy,proto3,oneof" json:"legacy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupResponse) Reset() {
	*x = GroupResponse{}
	mi := &file_node_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupResponse) ProtoMessage() {}

func (x *GroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupResponse.ProtoReflect.Descriptor instead.
func (*GroupResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{24}
}

func (x *GroupResponse) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupResponse) GetPrimary() *EndpointConfig {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *GroupResponse) GetLegacy() *EndpointConfig {
	if x != nil {
		return x.Legacy
	}
	return nil
}

type ListGroupsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId     *string                `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3,oneof" json:"version_set_id,omitempty"`
	IncludeEndpoints bool                   `protobuf:"varint,2,opt,name=include_endpoints,json=includeEndpoints,proto3" json:"include_endpoints,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListGroupsRequest) Reset() {
	*x = ListGroupsRequest{}
	mi := &file_node_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsRequest) ProtoMessage() {}

func (x *ListGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListGroupsRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{25}
}

func (x *ListGroupsRequest) GetVersionSetId() string {
	if x != nil && x.VersionSetId != nil {
		return *x.VersionSetId
	}
	return ""
}

func (x *ListGroupsRequest) GetIncludeEndpoints() bool {
	if x != nil {
		return x.IncludeEndpoints
	}
	return false
}

type ListGroupsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        []*GroupResponse       `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupsResponse) Reset() {
	*x = ListGroupsResponse{}
	mi := &file_node_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsResponse) ProtoMessage() {}

func (x *ListGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListGroupsResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{26}
}

func (x *ListGroupsResponse) GetGroups() []*GroupResponse {
	if x != nil {
		return x.Groups
	}
	return nil
}

type UpdateGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*UpdateGroupRequest_Id
	//	*UpdateGroupRequest_GroupQuery
	Query              isUpdateGroupRequest_Query `protobuf_oneof:"query"`
	VersionSetId       *string                    `protobuf:"bytes,3,opt,name=version_set_id,json=versionSetId,proto3,oneof" json:"version_set_id,omitempty"`
	LogLevel           *int32                     `protobuf:"varint,5,opt,name=log_level,json=logLevel,proto3,oneof" json:"log_level,omitempty"`
	EndpointConfigName *string                    `protobuf:"bytes,6,opt,name=endpoint_config_name,json=endpointConfigName,proto3,oneof" json:"endpoint_config_name,omitempty"`
	LegacyConfigName   *string                    `protobuf:"bytes,7,opt,name=legacy_config_name,json=legacyConfigName,proto3,oneof" json:"legacy_config_name,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateGroupRequest) Reset() {
	*x = UpdateGroupRequest{}
	mi := &file_node_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupRequest) ProtoMessage() {}

func (x *UpdateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateGroupRequest) GetQuery() isUpdateGroupRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UpdateGroupRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*UpdateGroupRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *UpdateGroupRequest) GetGroupQuery() *GroupNameQuery {
	if x != nil {
		if x, ok := x.Query.(*UpdateGroupRequest_GroupQuery); ok {
			return x.GroupQuery
		}
	}
	return nil
}

func (x *UpdateGroupRequest) GetVersionSetId() string {
	if x != nil && x.VersionSetId != nil {
		return *x.VersionSetId
	}
	return ""
}

func (x *UpdateGroupRequest) GetLogLevel() int32 {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return 0
}

func (x *UpdateGroupRequest) GetEndpointConfigName() string {
	if x != nil && x.EndpointConfigName != nil {
		return *x.EndpointConfigName
	}
	return ""
}

func (x *UpdateGroupRequest) GetLegacyConfigName() string {
	if x != nil && x.LegacyConfigName != nil {
		return *x.LegacyConfigName
	}
	return ""
}

type isUpdateGroupRequest_Query interface {
	isUpdateGroupRequest_Query()
}

type UpdateGroupRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type UpdateGroupRequest_GroupQuery struct {
	GroupQuery *GroupNameQuery `protobuf:"bytes,2,opt,name=group_query,json=groupQuery,proto3,oneof"`
}

func (*UpdateGroupRequest_Id) isUpdateGroupRequest_Query() {}

func (*UpdateGroupRequest_GroupQuery) isUpdateGroupRequest_Query() {}

type DeleteGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VersionSetId  string                 `protobuf:"bytes,2,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteGroupRequest) Reset() {
	*x = DeleteGroupRequest{}
	mi := &file_node_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupRequest) ProtoMessage() {}

func (x *DeleteGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteGroupRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteGroupRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

// ----------------------------- HardwareConfigs-------------------------------
type HardwareConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeSerialNumber string                 `protobuf:"bytes,2,opt,name=node_serial_number,json=nodeSerialNumber,proto3" json:"node_serial_number,omitempty"`
	Device           string                 `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	IpCidr           string                 `protobuf:"bytes,4,opt,name=ip_cidr,json=ipCidr,proto3" json:"ip_cidr,omitempty"`
	VersionSetId     string                 `protobuf:"bytes,5,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	CreatedBy        string                 `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HardwareConfig) Reset() {
	*x = HardwareConfig{}
	mi := &file_node_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardwareConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareConfig) ProtoMessage() {}

func (x *HardwareConfig) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareConfig.ProtoReflect.Descriptor instead.
func (*HardwareConfig) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{29}
}

func (x *HardwareConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HardwareConfig) GetNodeSerialNumber() string {
	if x != nil {
		return x.NodeSerialNumber
	}
	return ""
}

func (x *HardwareConfig) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *HardwareConfig) GetIpCidr() string {
	if x != nil {
		return x.IpCidr
	}
	return ""
}

func (x *HardwareConfig) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *HardwareConfig) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type CreateHardwareConfigRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	NodeSerialNumber string                 `protobuf:"bytes,1,opt,name=node_serial_number,json=nodeSerialNumber,proto3" json:"node_serial_number,omitempty"`
	Device           string                 `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	IpCidr           string                 `protobuf:"bytes,3,opt,name=ip_cidr,json=ipCidr,proto3" json:"ip_cidr,omitempty"`
	VersionSetId     string                 `protobuf:"bytes,4,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	CreatedBy        string                 `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateHardwareConfigRequest) Reset() {
	*x = CreateHardwareConfigRequest{}
	mi := &file_node_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHardwareConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHardwareConfigRequest) ProtoMessage() {}

func (x *CreateHardwareConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHardwareConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateHardwareConfigRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{30}
}

func (x *CreateHardwareConfigRequest) GetNodeSerialNumber() string {
	if x != nil {
		return x.NodeSerialNumber
	}
	return ""
}

func (x *CreateHardwareConfigRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *CreateHardwareConfigRequest) GetIpCidr() string {
	if x != nil {
		return x.IpCidr
	}
	return ""
}

func (x *CreateHardwareConfigRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *CreateHardwareConfigRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type HardwareConfigNameQuery struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId     string                 `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	NodeSerialNumber string                 `protobuf:"bytes,2,opt,name=node_serial_number,json=nodeSerialNumber,proto3" json:"node_serial_number,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HardwareConfigNameQuery) Reset() {
	*x = HardwareConfigNameQuery{}
	mi := &file_node_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardwareConfigNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareConfigNameQuery) ProtoMessage() {}

func (x *HardwareConfigNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareConfigNameQuery.ProtoReflect.Descriptor instead.
func (*HardwareConfigNameQuery) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{31}
}

func (x *HardwareConfigNameQuery) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *HardwareConfigNameQuery) GetNodeSerialNumber() string {
	if x != nil {
		return x.NodeSerialNumber
	}
	return ""
}

type GetHardwareConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*GetHardwareConfigRequest_Id
	//	*GetHardwareConfigRequest_HardwareConfigQuery
	//	*GetHardwareConfigRequest_VersionSetId
	Query         isGetHardwareConfigRequest_Query `protobuf_oneof:"query"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHardwareConfigRequest) Reset() {
	*x = GetHardwareConfigRequest{}
	mi := &file_node_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHardwareConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHardwareConfigRequest) ProtoMessage() {}

func (x *GetHardwareConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHardwareConfigRequest.ProtoReflect.Descriptor instead.
func (*GetHardwareConfigRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{32}
}

func (x *GetHardwareConfigRequest) GetQuery() isGetHardwareConfigRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetHardwareConfigRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*GetHardwareConfigRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *GetHardwareConfigRequest) GetHardwareConfigQuery() *HardwareConfigNameQuery {
	if x != nil {
		if x, ok := x.Query.(*GetHardwareConfigRequest_HardwareConfigQuery); ok {
			return x.HardwareConfigQuery
		}
	}
	return nil
}

func (x *GetHardwareConfigRequest) GetVersionSetId() string {
	if x != nil {
		if x, ok := x.Query.(*GetHardwareConfigRequest_VersionSetId); ok {
			return x.VersionSetId
		}
	}
	return ""
}

type isGetHardwareConfigRequest_Query interface {
	isGetHardwareConfigRequest_Query()
}

type GetHardwareConfigRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"` //get one hwconfig
}

type GetHardwareConfigRequest_HardwareConfigQuery struct {
	HardwareConfigQuery *HardwareConfigNameQuery `protobuf:"bytes,2,opt,name=hardware_config_query,json=hardwareConfigQuery,proto3,oneof"` //get all hws for one node
}

type GetHardwareConfigRequest_VersionSetId struct {
	VersionSetId string `protobuf:"bytes,3,opt,name=version_set_id,json=versionSetId,proto3,oneof"` //get all hws for one version set
}

func (*GetHardwareConfigRequest_Id) isGetHardwareConfigRequest_Query() {}

func (*GetHardwareConfigRequest_HardwareConfigQuery) isGetHardwareConfigRequest_Query() {}

func (*GetHardwareConfigRequest_VersionSetId) isGetHardwareConfigRequest_Query() {}

type HardwareConfigResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	HardwareConfig []*HardwareConfig      `protobuf:"bytes,1,rep,name=hardware_config,json=hardwareConfig,proto3" json:"hardware_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HardwareConfigResponse) Reset() {
	*x = HardwareConfigResponse{}
	mi := &file_node_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HardwareConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareConfigResponse) ProtoMessage() {}

func (x *HardwareConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareConfigResponse.ProtoReflect.Descriptor instead.
func (*HardwareConfigResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{33}
}

func (x *HardwareConfigResponse) GetHardwareConfig() []*HardwareConfig {
	if x != nil {
		return x.HardwareConfig
	}
	return nil
}

type UpdateHardwareConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Device        *string                `protobuf:"bytes,2,opt,name=device,proto3,oneof" json:"device,omitempty"`
	IpCidr        *string                `protobuf:"bytes,3,opt,name=ip_cidr,json=ipCidr,proto3,oneof" json:"ip_cidr,omitempty"`
	VersionSetId  *string                `protobuf:"bytes,4,opt,name=version_set_id,json=versionSetId,proto3,oneof" json:"version_set_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHardwareConfigRequest) Reset() {
	*x = UpdateHardwareConfigRequest{}
	mi := &file_node_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHardwareConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHardwareConfigRequest) ProtoMessage() {}

func (x *UpdateHardwareConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHardwareConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateHardwareConfigRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateHardwareConfigRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateHardwareConfigRequest) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *UpdateHardwareConfigRequest) GetIpCidr() string {
	if x != nil && x.IpCidr != nil {
		return *x.IpCidr
	}
	return ""
}

func (x *UpdateHardwareConfigRequest) GetVersionSetId() string {
	if x != nil && x.VersionSetId != nil {
		return *x.VersionSetId
	}
	return ""
}

type DeleteHardwareConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteHardwareConfigRequest) Reset() {
	*x = DeleteHardwareConfigRequest{}
	mi := &file_node_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteHardwareConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHardwareConfigRequest) ProtoMessage() {}

func (x *DeleteHardwareConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHardwareConfigRequest.ProtoReflect.Descriptor instead.
func (*DeleteHardwareConfigRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteHardwareConfigRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Proxy struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeSerialNumber   string                 `protobuf:"bytes,2,opt,name=node_serial_number,json=nodeSerialNumber,proto3" json:"node_serial_number,omitempty"`
	GroupName          string                 `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	State              bool                   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	ProxyType          ProxyType              `protobuf:"varint,5,opt,name=proxy_type,json=proxyType,proto3,enum=node.ProxyType" json:"proxy_type,omitempty"`
	ServerEndpointAddr string                 `protobuf:"bytes,6,opt,name=server_endpoint_addr,json=serverEndpointAddr,proto3" json:"server_endpoint_addr,omitempty"`
	ClientEndpointAddr string                 `protobuf:"bytes,7,opt,name=client_endpoint_addr,json=clientEndpointAddr,proto3" json:"client_endpoint_addr,omitempty"`
	VersionSetId       string                 `protobuf:"bytes,8,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	CreatedBy          string                 `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Name               string                 `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Proxy) Reset() {
	*x = Proxy{}
	mi := &file_node_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy) ProtoMessage() {}

func (x *Proxy) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy.ProtoReflect.Descriptor instead.
func (*Proxy) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{36}
}

func (x *Proxy) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Proxy) GetNodeSerialNumber() string {
	if x != nil {
		return x.NodeSerialNumber
	}
	return ""
}

func (x *Proxy) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Proxy) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *Proxy) GetProxyType() ProxyType {
	if x != nil {
		return x.ProxyType
	}
	return ProxyType_PROXY_TYPE_UNSPECIFIED
}

func (x *Proxy) GetServerEndpointAddr() string {
	if x != nil {
		return x.ServerEndpointAddr
	}
	return ""
}

func (x *Proxy) GetClientEndpointAddr() string {
	if x != nil {
		return x.ClientEndpointAddr
	}
	return ""
}

func (x *Proxy) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *Proxy) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Proxy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProxyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proxy         []*Proxy               `protobuf:"bytes,1,rep,name=proxy,proto3" json:"proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxyResponse) Reset() {
	*x = ProxyResponse{}
	mi := &file_node_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyResponse) ProtoMessage() {}

func (x *ProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyResponse.ProtoReflect.Descriptor instead.
func (*ProxyResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{37}
}

func (x *ProxyResponse) GetProxy() []*Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

type CreateProxyRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	NodeSerialNumber   string                 `protobuf:"bytes,1,opt,name=node_serial_number,json=nodeSerialNumber,proto3" json:"node_serial_number,omitempty"`
	GroupName          string                 `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	State              bool                   `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	ProxyType          ProxyType              `protobuf:"varint,4,opt,name=proxy_type,json=proxyType,proto3,enum=node.ProxyType" json:"proxy_type,omitempty"`
	ServerEndpointAddr string                 `protobuf:"bytes,5,opt,name=server_endpoint_addr,json=serverEndpointAddr,proto3" json:"server_endpoint_addr,omitempty"`
	ClientEndpointAddr string                 `protobuf:"bytes,6,opt,name=client_endpoint_addr,json=clientEndpointAddr,proto3" json:"client_endpoint_addr,omitempty"`
	CreatedBy          string                 `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	VersionSetId       string                 `protobuf:"bytes,8,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	Name               string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateProxyRequest) Reset() {
	*x = CreateProxyRequest{}
	mi := &file_node_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProxyRequest) ProtoMessage() {}

func (x *CreateProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProxyRequest.ProtoReflect.Descriptor instead.
func (*CreateProxyRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{38}
}

func (x *CreateProxyRequest) GetNodeSerialNumber() string {
	if x != nil {
		return x.NodeSerialNumber
	}
	return ""
}

func (x *CreateProxyRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CreateProxyRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *CreateProxyRequest) GetProxyType() ProxyType {
	if x != nil {
		return x.ProxyType
	}
	return ProxyType_PROXY_TYPE_UNSPECIFIED
}

func (x *CreateProxyRequest) GetServerEndpointAddr() string {
	if x != nil {
		return x.ServerEndpointAddr
	}
	return ""
}

func (x *CreateProxyRequest) GetClientEndpointAddr() string {
	if x != nil {
		return x.ClientEndpointAddr
	}
	return ""
}

func (x *CreateProxyRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateProxyRequest) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *CreateProxyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProxyNameQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  string                 `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxyNameQuery) Reset() {
	*x = ProxyNameQuery{}
	mi := &file_node_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyNameQuery) ProtoMessage() {}

func (x *ProxyNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyNameQuery.ProtoReflect.Descriptor instead.
func (*ProxyNameQuery) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{39}
}

func (x *ProxyNameQuery) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *ProxyNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProxySerialQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSetId  string                 `protobuf:"bytes,1,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	Serial        string                 `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxySerialQuery) Reset() {
	*x = ProxySerialQuery{}
	mi := &file_node_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxySerialQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySerialQuery) ProtoMessage() {}

func (x *ProxySerialQuery) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySerialQuery.ProtoReflect.Descriptor instead.
func (*ProxySerialQuery) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{40}
}

func (x *ProxySerialQuery) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *ProxySerialQuery) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

type GetProxyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*GetProxyRequest_Id
	//	*GetProxyRequest_NameQuery
	//	*GetProxyRequest_SerialQuery
	//	*GetProxyRequest_VersionSetId
	Query         isGetProxyRequest_Query `protobuf_oneof:"query"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProxyRequest) Reset() {
	*x = GetProxyRequest{}
	mi := &file_node_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProxyRequest) ProtoMessage() {}

func (x *GetProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProxyRequest.ProtoReflect.Descriptor instead.
func (*GetProxyRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{41}
}

func (x *GetProxyRequest) GetQuery() isGetProxyRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetProxyRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*GetProxyRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *GetProxyRequest) GetNameQuery() *ProxyNameQuery {
	if x != nil {
		if x, ok := x.Query.(*GetProxyRequest_NameQuery); ok {
			return x.NameQuery
		}
	}
	return nil
}

func (x *GetProxyRequest) GetSerialQuery() *ProxySerialQuery {
	if x != nil {
		if x, ok := x.Query.(*GetProxyRequest_SerialQuery); ok {
			return x.SerialQuery
		}
	}
	return nil
}

func (x *GetProxyRequest) GetVersionSetId() string {
	if x != nil {
		if x, ok := x.Query.(*GetProxyRequest_VersionSetId); ok {
			return x.VersionSetId
		}
	}
	return ""
}

type isGetProxyRequest_Query interface {
	isGetProxyRequest_Query()
}

type GetProxyRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type GetProxyRequest_NameQuery struct {
	NameQuery *ProxyNameQuery `protobuf:"bytes,2,opt,name=name_query,json=nameQuery,proto3,oneof"`
}

type GetProxyRequest_SerialQuery struct {
	SerialQuery *ProxySerialQuery `protobuf:"bytes,3,opt,name=serial_query,json=serialQuery,proto3,oneof"`
}

type GetProxyRequest_VersionSetId struct {
	VersionSetId string `protobuf:"bytes,4,opt,name=version_set_id,json=versionSetId,proto3,oneof"`
}

func (*GetProxyRequest_Id) isGetProxyRequest_Query() {}

func (*GetProxyRequest_NameQuery) isGetProxyRequest_Query() {}

func (*GetProxyRequest_SerialQuery) isGetProxyRequest_Query() {}

func (*GetProxyRequest_VersionSetId) isGetProxyRequest_Query() {}

type GetProxyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proxy         []*Proxy               `protobuf:"bytes,1,rep,name=proxy,proto3" json:"proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProxyResponse) Reset() {
	*x = GetProxyResponse{}
	mi := &file_node_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProxyResponse) ProtoMessage() {}

func (x *GetProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProxyResponse.ProtoReflect.Descriptor instead.
func (*GetProxyResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{42}
}

func (x *GetProxyResponse) GetProxy() []*Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

type UpdateProxyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Query:
	//
	//	*UpdateProxyRequest_Id
	//	*UpdateProxyRequest_NameQuery
	Query              isUpdateProxyRequest_Query `protobuf_oneof:"query"`
	State              *bool                      `protobuf:"varint,3,opt,name=state,proto3,oneof" json:"state,omitempty"`
	ProxyType          *ProxyType                 `protobuf:"varint,4,opt,name=proxy_type,json=proxyType,proto3,enum=node.ProxyType,oneof" json:"proxy_type,omitempty"`
	GroupId            *int32                     `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	ServerEndpointAddr *string                    `protobuf:"bytes,6,opt,name=server_endpoint_addr,json=serverEndpointAddr,proto3,oneof" json:"server_endpoint_addr,omitempty"`
	ClientEndpointAddr *string                    `protobuf:"bytes,7,opt,name=client_endpoint_addr,json=clientEndpointAddr,proto3,oneof" json:"client_endpoint_addr,omitempty"`
	Name               *string                    `protobuf:"bytes,8,opt,name=name,proto3,oneof" json:"name,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateProxyRequest) Reset() {
	*x = UpdateProxyRequest{}
	mi := &file_node_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProxyRequest) ProtoMessage() {}

func (x *UpdateProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProxyRequest.ProtoReflect.Descriptor instead.
func (*UpdateProxyRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateProxyRequest) GetQuery() isUpdateProxyRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UpdateProxyRequest) GetId() int32 {
	if x != nil {
		if x, ok := x.Query.(*UpdateProxyRequest_Id); ok {
			return x.Id
		}
	}
	return 0
}

func (x *UpdateProxyRequest) GetNameQuery() *ProxyNameQuery {
	if x != nil {
		if x, ok := x.Query.(*UpdateProxyRequest_NameQuery); ok {
			return x.NameQuery
		}
	}
	return nil
}

func (x *UpdateProxyRequest) GetState() bool {
	if x != nil && x.State != nil {
		return *x.State
	}
	return false
}

func (x *UpdateProxyRequest) GetProxyType() ProxyType {
	if x != nil && x.ProxyType != nil {
		return *x.ProxyType
	}
	return ProxyType_PROXY_TYPE_UNSPECIFIED
}

func (x *UpdateProxyRequest) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *UpdateProxyRequest) GetServerEndpointAddr() string {
	if x != nil && x.ServerEndpointAddr != nil {
		return *x.ServerEndpointAddr
	}
	return ""
}

func (x *UpdateProxyRequest) GetClientEndpointAddr() string {
	if x != nil && x.ClientEndpointAddr != nil {
		return *x.ClientEndpointAddr
	}
	return ""
}

func (x *UpdateProxyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type isUpdateProxyRequest_Query interface {
	isUpdateProxyRequest_Query()
}

type UpdateProxyRequest_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type UpdateProxyRequest_NameQuery struct {
	NameQuery *ProxyNameQuery `protobuf:"bytes,2,opt,name=name_query,json=nameQuery,proto3,oneof"`
}

func (*UpdateProxyRequest_Id) isUpdateProxyRequest_Query() {}

func (*UpdateProxyRequest_NameQuery) isUpdateProxyRequest_Query() {}

type DeleteProxyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProxyRequest) Reset() {
	*x = DeleteProxyRequest{}
	mi := &file_node_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProxyRequest) ProtoMessage() {}

func (x *DeleteProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProxyRequest.ProtoReflect.Descriptor instead.
func (*DeleteProxyRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteProxyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type VersionSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State         VersionState           `protobuf:"varint,4,opt,name=state,proto3,enum=node.VersionState" json:"state,omitempty"`
	ActivatedAt   *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
	DisabledAt    *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=disabled_at,json=disabledAt,proto3" json:"disabled_at,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Metadata      *_struct.Struct        `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionSet) Reset() {
	*x = VersionSet{}
	mi := &file_node_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionSet) ProtoMessage() {}

func (x *VersionSet) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionSet.ProtoReflect.Descriptor instead.
func (*VersionSet) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{45}
}

func (x *VersionSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VersionSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VersionSet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VersionSet) GetState() VersionState {
	if x != nil {
		return x.State
	}
	return VersionState_DRAFT
}

func (x *VersionSet) GetActivatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ActivatedAt
	}
	return nil
}

func (x *VersionSet) GetDisabledAt() *timestamp.Timestamp {
	if x != nil {
		return x.DisabledAt
	}
	return nil
}

func (x *VersionSet) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *VersionSet) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateVersionSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Metadata      *_struct.Struct        `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVersionSetRequest) Reset() {
	*x = CreateVersionSetRequest{}
	mi := &file_node_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVersionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVersionSetRequest) ProtoMessage() {}

func (x *CreateVersionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVersionSetRequest.ProtoReflect.Descriptor instead.
func (*CreateVersionSetRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{46}
}

func (x *CreateVersionSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVersionSetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateVersionSetRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateVersionSetRequest) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetVersionSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVersionSetRequest) Reset() {
	*x = GetVersionSetRequest{}
	mi := &file_node_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVersionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionSetRequest) ProtoMessage() {}

func (x *GetVersionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionSetRequest.ProtoReflect.Descriptor instead.
func (*GetVersionSetRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{47}
}

func (x *GetVersionSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type VersionSetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSet    *VersionSet            `protobuf:"bytes,1,opt,name=version_set,json=versionSet,proto3" json:"version_set,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionSetResponse) Reset() {
	*x = VersionSetResponse{}
	mi := &file_node_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionSetResponse) ProtoMessage() {}

func (x *VersionSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionSetResponse.ProtoReflect.Descriptor instead.
func (*VersionSetResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{48}
}

func (x *VersionSetResponse) GetVersionSet() *VersionSet {
	if x != nil {
		return x.VersionSet
	}
	return nil
}

type ListVersionSetsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         *VersionState          `protobuf:"varint,1,opt,name=state,proto3,enum=node.VersionState,oneof" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionSetsRequest) Reset() {
	*x = ListVersionSetsRequest{}
	mi := &file_node_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionSetsRequest) ProtoMessage() {}

func (x *ListVersionSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionSetsRequest.ProtoReflect.Descriptor instead.
func (*ListVersionSetsRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{49}
}

func (x *ListVersionSetsRequest) GetState() VersionState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return VersionState_DRAFT
}

type ListVersionSetsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VersionSets   []*VersionSet          `protobuf:"bytes,1,rep,name=version_sets,json=versionSets,proto3" json:"version_sets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionSetsResponse) Reset() {
	*x = ListVersionSetsResponse{}
	mi := &file_node_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionSetsResponse) ProtoMessage() {}

func (x *ListVersionSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionSetsResponse.ProtoReflect.Descriptor instead.
func (*ListVersionSetsResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{50}
}

func (x *ListVersionSetsResponse) GetVersionSets() []*VersionSet {
	if x != nil {
		return x.VersionSets
	}
	return nil
}

type UpdateVersionSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Metadata      *_struct.Struct        `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVersionSetRequest) Reset() {
	*x = UpdateVersionSetRequest{}
	mi := &file_node_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVersionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVersionSetRequest) ProtoMessage() {}

func (x *UpdateVersionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVersionSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateVersionSetRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateVersionSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateVersionSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVersionSetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateVersionSetRequest) GetMetadata() *_struct.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DeleteVersionSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVersionSetRequest) Reset() {
	*x = DeleteVersionSetRequest{}
	mi := &file_node_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVersionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVersionSetRequest) ProtoMessage() {}

func (x *DeleteVersionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVersionSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteVersionSetRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteVersionSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ActivateVersionSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateVersionSetRequest) Reset() {
	*x = ActivateVersionSetRequest{}
	mi := &file_node_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateVersionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateVersionSetRequest) ProtoMessage() {}

func (x *ActivateVersionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateVersionSetRequest.ProtoReflect.Descriptor instead.
func (*ActivateVersionSetRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{53}
}

func (x *ActivateVersionSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DisableVersionSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableVersionSetRequest) Reset() {
	*x = DisableVersionSetRequest{}
	mi := &file_node_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableVersionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableVersionSetRequest) ProtoMessage() {}

func (x *DisableVersionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableVersionSetRequest.ProtoReflect.Descriptor instead.
func (*DisableVersionSetRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{54}
}

func (x *DisableVersionSetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_node_proto protoreflect.FileDescriptor

var file_node_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60,
	0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x6f, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x73, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdb, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x24,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x68, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xc5, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x5a, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x07,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x22, 0x7b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x3d, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9a, 0x02, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x22, 0x5e, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x0e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x73, 0x6c, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x73, 0x6c, 0x4b, 0x65, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x22, 0x53, 0x0a, 0x17, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x17, 0x61, 0x73, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x73, 0x6c, 0x4b, 0x65, 0x79, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x14, 0x61, 0x73,
	0x6c, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x22,
	0x8a, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53,
	0x0a, 0x15, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x5a, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xbd, 0x03, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x6e, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x17, 0x61, 0x73, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x41, 0x73, 0x6c, 0x4b, 0x65, 0x79, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x48, 0x04, 0x52, 0x14, 0x61, 0x73, 0x6c, 0x4b, 0x65, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x73, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x55, 0x0a, 0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x22, 0x7e, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xf0, 0x02, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x4a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x63,
	0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x43, 0x69, 0x64,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x6d, 0x0a, 0x17, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x15, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x57, 0x0a, 0x16, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xbd, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x22, 0xe4, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a,
	0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x26, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22, 0xbe, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcc,
	0x02, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x33,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x12, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x22, 0x51, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x19, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x2a, 0x4d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x4c, 0x53, 0x54, 0x4c, 0x53, 0x10,
	0x03, 0x2a, 0xac, 0x04, 0x0a, 0x14, 0x41, 0x73, 0x6c, 0x4b, 0x65, 0x79, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53,
	0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f,
	0x53, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x53, 0x4c,
	0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x43,
	0x50, 0x35, 0x32, 0x31, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45,
	0x58, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x58, 0x32, 0x35, 0x35, 0x31, 0x39,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x43, 0x5f, 0x58, 0x34, 0x34, 0x38, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x50, 0x51, 0x43, 0x5f, 0x4d, 0x4c, 0x4b, 0x45,
	0x4d, 0x35, 0x31, 0x32, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45,
	0x58, 0x5f, 0x50, 0x51, 0x43, 0x5f, 0x4d, 0x4c, 0x4b, 0x45, 0x4d, 0x37, 0x36, 0x38, 0x10, 0x07,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x50, 0x51, 0x43, 0x5f,
	0x4d, 0x4c, 0x4b, 0x45, 0x4d, 0x31, 0x30, 0x32, 0x34, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x41,
	0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x43, 0x50, 0x32, 0x35, 0x36, 0x5f, 0x4d, 0x4c, 0x4b, 0x45, 0x4d, 0x35, 0x31, 0x32, 0x10, 0x09,
	0x12, 0x23, 0x0a, 0x1f, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x48, 0x59, 0x42, 0x52,
	0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34, 0x5f, 0x4d, 0x4c, 0x4b, 0x45, 0x4d,
	0x37, 0x36, 0x38, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58,
	0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x5f,
	0x4d, 0x4c, 0x4b, 0x45, 0x4d, 0x37, 0x36, 0x38, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x53,
	0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43,
	0x50, 0x35, 0x32, 0x31, 0x5f, 0x4d, 0x4c, 0x4b, 0x45, 0x4d, 0x31, 0x30, 0x32, 0x34, 0x10, 0x0c,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x48, 0x59, 0x42, 0x52,
	0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x50, 0x33, 0x38, 0x34, 0x5f, 0x4d, 0x4c, 0x4b, 0x45, 0x4d,
	0x31, 0x30, 0x32, 0x34, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45,
	0x58, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x58, 0x32, 0x35, 0x35, 0x31, 0x39, 0x5f,
	0x4d, 0x4c, 0x4b, 0x45, 0x4d, 0x35, 0x31, 0x32, 0x10, 0x0e, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x53,
	0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x58, 0x34, 0x34,
	0x38, 0x5f, 0x4d, 0x4c, 0x4b, 0x45, 0x4d, 0x37, 0x36, 0x38, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e,
	0x41, 0x53, 0x4c, 0x5f, 0x4b, 0x45, 0x58, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f, 0x58,
	0x32, 0x35, 0x35, 0x31, 0x39, 0x5f, 0x4d, 0x4c, 0x4b, 0x45, 0x4d, 0x37, 0x36, 0x38, 0x10, 0x10,
	0x2a, 0x4b, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xfb, 0x11,
	0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x15, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x17, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3f,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x57, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12,
	0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x49, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x1f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x1e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x18, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x15, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x65, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x69, 0x6c, 0x73, 0x6c,
	0x6f, 0x6c, 0x2f, 0x6b, 0x72, 0x69, 0x74, 0x69, 0x73, 0x33, 0x6d, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_node_proto_rawDescOnce sync.Once
	file_node_proto_rawDescData []byte
)

func file_node_proto_rawDescGZIP() []byte {
	file_node_proto_rawDescOnce.Do(func() {
		file_node_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_node_proto_rawDesc), len(file_node_proto_rawDesc)))
	})
	return file_node_proto_rawDescData
}

var file_node_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_node_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_node_proto_goTypes = []any{
	(ProxyType)(0),                      // 0: node.ProxyType
	(AslKeyexchangeMethod)(0),           // 1: node.AslKeyexchangeMethod
	(VersionState)(0),                   // 2: node.VersionState
	(*ActivateNodeRequest)(nil),         // 3: node.ActivateNodeRequest
	(*ActivateFleetRequest)(nil),        // 4: node.ActivateFleetRequest
	(*ActivateResponse)(nil),            // 5: node.ActivateResponse
	(*Node)(nil),                        // 6: node.Node
	(*NodeResponse)(nil),                // 7: node.NodeResponse
	(*CreateNodeRequest)(nil),           // 8: node.CreateNodeRequest
	(*NodeNameQuery)(nil),               // 9: node.NodeNameQuery
	(*GetNodeRequest)(nil),              // 10: node.GetNodeRequest
	(*ListNodesRequest)(nil),            // 11: node.ListNodesRequest
	(*ListNodesResponse)(nil),           // 12: node.ListNodesResponse
	(*UpdateNodeRequest)(nil),           // 13: node.UpdateNodeRequest
	(*DeleteNodeRequest)(nil),           // 14: node.DeleteNodeRequest
	(*EndpointConfig)(nil),              // 15: node.EndpointConfig
	(*EndpointConfigNameQuery)(nil),     // 16: node.EndpointConfigNameQuery
	(*CreateEndpointConfigRequest)(nil), // 17: node.CreateEndpointConfigRequest
	(*GetEndpointConfigRequest)(nil),    // 18: node.GetEndpointConfigRequest
	(*ListEndpointConfigsRequest)(nil),  // 19: node.ListEndpointConfigsRequest
	(*ListEndpointConfigsResponse)(nil), // 20: node.ListEndpointConfigsResponse
	(*UpdateEndpointConfigRequest)(nil), // 21: node.UpdateEndpointConfigRequest
	(*DeleteEndpointConfigRequest)(nil), // 22: node.DeleteEndpointConfigRequest
	(*Group)(nil),                       // 23: node.Group
	(*CreateGroupRequest)(nil),          // 24: node.CreateGroupRequest
	(*GroupNameQuery)(nil),              // 25: node.GroupNameQuery
	(*GetGroupRequest)(nil),             // 26: node.GetGroupRequest
	(*GroupResponse)(nil),               // 27: node.GroupResponse
	(*ListGroupsRequest)(nil),           // 28: node.ListGroupsRequest
	(*ListGroupsResponse)(nil),          // 29: node.ListGroupsResponse
	(*UpdateGroupRequest)(nil),          // 30: node.UpdateGroupRequest
	(*DeleteGroupRequest)(nil),          // 31: node.DeleteGroupRequest
	(*HardwareConfig)(nil),              // 32: node.HardwareConfig
	(*CreateHardwareConfigRequest)(nil), // 33: node.CreateHardwareConfigRequest
	(*HardwareConfigNameQuery)(nil),     // 34: node.HardwareConfigNameQuery
	(*GetHardwareConfigRequest)(nil),    // 35: node.GetHardwareConfigRequest
	(*HardwareConfigResponse)(nil),      // 36: node.HardwareConfigResponse
	(*UpdateHardwareConfigRequest)(nil), // 37: node.UpdateHardwareConfigRequest
	(*DeleteHardwareConfigRequest)(nil), // 38: node.DeleteHardwareConfigRequest
	(*Proxy)(nil),                       // 39: node.Proxy
	(*ProxyResponse)(nil),               // 40: node.ProxyResponse
	(*CreateProxyRequest)(nil),          // 41: node.CreateProxyRequest
	(*ProxyNameQuery)(nil),              // 42: node.ProxyNameQuery
	(*ProxySerialQuery)(nil),            // 43: node.ProxySerialQuery
	(*GetProxyRequest)(nil),             // 44: node.GetProxyRequest
	(*GetProxyResponse)(nil),            // 45: node.GetProxyResponse
	(*UpdateProxyRequest)(nil),          // 46: node.UpdateProxyRequest
	(*DeleteProxyRequest)(nil),          // 47: node.DeleteProxyRequest
	(*VersionSet)(nil),                  // 48: node.VersionSet
	(*CreateVersionSetRequest)(nil),     // 49: node.CreateVersionSetRequest
	(*GetVersionSetRequest)(nil),        // 50: node.GetVersionSetRequest
	(*VersionSetResponse)(nil),          // 51: node.VersionSetResponse
	(*ListVersionSetsRequest)(nil),      // 52: node.ListVersionSetsRequest
	(*ListVersionSetsResponse)(nil),     // 53: node.ListVersionSetsResponse
	(*UpdateVersionSetRequest)(nil),     // 54: node.UpdateVersionSetRequest
	(*DeleteVersionSetRequest)(nil),     // 55: node.DeleteVersionSetRequest
	(*ActivateVersionSetRequest)(nil),   // 56: node.ActivateVersionSetRequest
	(*DisableVersionSetRequest)(nil),    // 57: node.DisableVersionSetRequest
	(*_struct.Struct)(nil),              // 58: google.protobuf.Struct
	(*timestamp.Timestamp)(nil),         // 59: google.protobuf.Timestamp
	(*empty.Empty)(nil),                 // 60: google.protobuf.Empty
}
var file_node_proto_depIdxs = []int32{
	58, // 0: node.ActivateResponse.metadata:type_name -> google.protobuf.Struct
	59, // 1: node.Node.last_seen:type_name -> google.protobuf.Timestamp
	6,  // 2: node.NodeResponse.node:type_name -> node.Node
	39, // 3: node.NodeResponse.proxy:type_name -> node.Proxy
	32, // 4: node.NodeResponse.hw_configs:type_name -> node.HardwareConfig
	9,  // 5: node.GetNodeRequest.node_query:type_name -> node.NodeNameQuery
	7,  // 6: node.ListNodesResponse.nodes:type_name -> node.NodeResponse
	9,  // 7: node.UpdateNodeRequest.node_query:type_name -> node.NodeNameQuery
	59, // 8: node.UpdateNodeRequest.last_seen:type_name -> google.protobuf.Timestamp
	1,  // 9: node.CreateEndpointConfigRequest.asl_key_exchange_method:type_name -> node.AslKeyexchangeMethod
	16, // 10: node.GetEndpointConfigRequest.endpoint_config_query:type_name -> node.EndpointConfigNameQuery
	15, // 11: node.ListEndpointConfigsResponse.configs:type_name -> node.EndpointConfig
	16, // 12: node.UpdateEndpointConfigRequest.endpoint_config_query:type_name -> node.EndpointConfigNameQuery
	1,  // 13: node.UpdateEndpointConfigRequest.asl_key_exchange_method:type_name -> node.AslKeyexchangeMethod
	25, // 14: node.GetGroupRequest.group_query:type_name -> node.GroupNameQuery
	23, // 15: node.GroupResponse.group:type_name -> node.Group
	15, // 16: node.GroupResponse.primary:type_name -> node.EndpointConfig
	15, // 17: node.GroupResponse.legacy:type_name -> node.EndpointConfig
	27, // 18: node.ListGroupsResponse.groups:type_name -> node.GroupResponse
	25, // 19: node.UpdateGroupRequest.group_query:type_name -> node.GroupNameQuery
	34, // 20: node.GetHardwareConfigRequest.hardware_config_query:type_name -> node.HardwareConfigNameQuery
	32, // 21: node.HardwareConfigResponse.hardware_config:type_name -> node.HardwareConfig
	0,  // 22: node.Proxy.proxy_type:type_name -> node.ProxyType
	39, // 23: node.ProxyResponse.proxy:type_name -> node.Proxy
	0,  // 24: node.CreateProxyRequest.proxy_type:type_name -> node.ProxyType
	42, // 25: node.GetProxyRequest.name_query:type_name -> node.ProxyNameQuery
	43, // 26: node.GetProxyRequest.serial_query:type_name -> node.ProxySerialQuery
	39, // 27: node.GetProxyResponse.proxy:type_name -> node.Proxy
	42, // 28: node.UpdateProxyRequest.name_query:type_name -> node.ProxyNameQuery
	0,  // 29: node.UpdateProxyRequest.proxy_type:type_name -> node.ProxyType
	2,  // 30: node.VersionSet.state:type_name -> node.VersionState
	59, // 31: node.VersionSet.activated_at:type_name -> google.protobuf.Timestamp
	59, // 32: node.VersionSet.disabled_at:type_name -> google.protobuf.Timestamp
	58, // 33: node.VersionSet.metadata:type_name -> google.protobuf.Struct
	58, // 34: node.CreateVersionSetRequest.metadata:type_name -> google.protobuf.Struct
	48, // 35: node.VersionSetResponse.version_set:type_name -> node.VersionSet
	2,  // 36: node.ListVersionSetsRequest.state:type_name -> node.VersionState
	48, // 37: node.ListVersionSetsResponse.version_sets:type_name -> node.VersionSet
	58, // 38: node.UpdateVersionSetRequest.metadata:type_name -> google.protobuf.Struct
	8,  // 39: node.Southbound.CreateNode:input_type -> node.CreateNodeRequest
	10, // 40: node.Southbound.GetNode:input_type -> node.GetNodeRequest
	11, // 41: node.Southbound.ListNodes:input_type -> node.ListNodesRequest
	13, // 42: node.Southbound.UpdateNode:input_type -> node.UpdateNodeRequest
	14, // 43: node.Southbound.DeleteNode:input_type -> node.DeleteNodeRequest
	17, // 44: node.Southbound.CreateEndpointConfig:input_type -> node.CreateEndpointConfigRequest
	18, // 45: node.Southbound.GetEndpointConfig:input_type -> node.GetEndpointConfigRequest
	19, // 46: node.Southbound.ListEndpointConfigs:input_type -> node.ListEndpointConfigsRequest
	21, // 47: node.Southbound.UpdateEndpointConfig:input_type -> node.UpdateEndpointConfigRequest
	22, // 48: node.Southbound.DeleteEndpointConfig:input_type -> node.DeleteEndpointConfigRequest
	24, // 49: node.Southbound.CreateGroup:input_type -> node.CreateGroupRequest
	26, // 50: node.Southbound.GetGroup:input_type -> node.GetGroupRequest
	28, // 51: node.Southbound.ListGroups:input_type -> node.ListGroupsRequest
	30, // 52: node.Southbound.UpdateGroup:input_type -> node.UpdateGroupRequest
	31, // 53: node.Southbound.DeleteGroup:input_type -> node.DeleteGroupRequest
	33, // 54: node.Southbound.CreateHardwareConfig:input_type -> node.CreateHardwareConfigRequest
	35, // 55: node.Southbound.GetHardwareConfig:input_type -> node.GetHardwareConfigRequest
	37, // 56: node.Southbound.UpdateHardwareConfig:input_type -> node.UpdateHardwareConfigRequest
	38, // 57: node.Southbound.DeleteHardwareConfig:input_type -> node.DeleteHardwareConfigRequest
	49, // 58: node.Southbound.CreateVersionSet:input_type -> node.CreateVersionSetRequest
	50, // 59: node.Southbound.GetVersionSet:input_type -> node.GetVersionSetRequest
	52, // 60: node.Southbound.ListVersionSets:input_type -> node.ListVersionSetsRequest
	54, // 61: node.Southbound.UpdateVersionSet:input_type -> node.UpdateVersionSetRequest
	55, // 62: node.Southbound.DeleteVersionSet:input_type -> node.DeleteVersionSetRequest
	56, // 63: node.Southbound.ActivateVersionSet:input_type -> node.ActivateVersionSetRequest
	57, // 64: node.Southbound.DisableVersionSet:input_type -> node.DisableVersionSetRequest
	41, // 65: node.Southbound.CreateProxy:input_type -> node.CreateProxyRequest
	44, // 66: node.Southbound.GetProxy:input_type -> node.GetProxyRequest
	46, // 67: node.Southbound.UpdateProxy:input_type -> node.UpdateProxyRequest
	47, // 68: node.Southbound.DeleteProxy:input_type -> node.DeleteProxyRequest
	4,  // 69: node.Southbound.ActivateFleet:input_type -> node.ActivateFleetRequest
	3,  // 70: node.Southbound.ActivateNode:input_type -> node.ActivateNodeRequest
	7,  // 71: node.Southbound.CreateNode:output_type -> node.NodeResponse
	7,  // 72: node.Southbound.GetNode:output_type -> node.NodeResponse
	12, // 73: node.Southbound.ListNodes:output_type -> node.ListNodesResponse
	60, // 74: node.Southbound.UpdateNode:output_type -> google.protobuf.Empty
	60, // 75: node.Southbound.DeleteNode:output_type -> google.protobuf.Empty
	15, // 76: node.Southbound.CreateEndpointConfig:output_type -> node.EndpointConfig
	15, // 77: node.Southbound.GetEndpointConfig:output_type -> node.EndpointConfig
	20, // 78: node.Southbound.ListEndpointConfigs:output_type -> node.ListEndpointConfigsResponse
	60, // 79: node.Southbound.UpdateEndpointConfig:output_type -> google.protobuf.Empty
	60, // 80: node.Southbound.DeleteEndpointConfig:output_type -> google.protobuf.Empty
	27, // 81: node.Southbound.CreateGroup:output_type -> node.GroupResponse
	27, // 82: node.Southbound.GetGroup:output_type -> node.GroupResponse
	29, // 83: node.Southbound.ListGroups:output_type -> node.ListGroupsResponse
	60, // 84: node.Southbound.UpdateGroup:output_type -> google.protobuf.Empty
	60, // 85: node.Southbound.DeleteGroup:output_type -> google.protobuf.Empty
	36, // 86: node.Southbound.CreateHardwareConfig:output_type -> node.HardwareConfigResponse
	36, // 87: node.Southbound.GetHardwareConfig:output_type -> node.HardwareConfigResponse
	60, // 88: node.Southbound.UpdateHardwareConfig:output_type -> google.protobuf.Empty
	60, // 89: node.Southbound.DeleteHardwareConfig:output_type -> google.protobuf.Empty
	51, // 90: node.Southbound.CreateVersionSet:output_type -> node.VersionSetResponse
	51, // 91: node.Southbound.GetVersionSet:output_type -> node.VersionSetResponse
	53, // 92: node.Southbound.ListVersionSets:output_type -> node.ListVersionSetsResponse
	60, // 93: node.Southbound.UpdateVersionSet:output_type -> google.protobuf.Empty
	60, // 94: node.Southbound.DeleteVersionSet:output_type -> google.protobuf.Empty
	51, // 95: node.Southbound.ActivateVersionSet:output_type -> node.VersionSetResponse
	51, // 96: node.Southbound.DisableVersionSet:output_type -> node.VersionSetResponse
	40, // 97: node.Southbound.CreateProxy:output_type -> node.ProxyResponse
	40, // 98: node.Southbound.GetProxy:output_type -> node.ProxyResponse
	60, // 99: node.Southbound.UpdateProxy:output_type -> google.protobuf.Empty
	60, // 100: node.Southbound.DeleteProxy:output_type -> google.protobuf.Empty
	5,  // 101: node.Southbound.ActivateFleet:output_type -> node.ActivateResponse
	5,  // 102: node.Southbound.ActivateNode:output_type -> node.ActivateResponse
	71, // [71:103] is the sub-list for method output_type
	39, // [39:71] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_node_proto_init() }
func file_node_proto_init() {
	if File_node_proto != nil {
		return
	}
	file_node_proto_msgTypes[1].OneofWrappers = []any{}
	file_node_proto_msgTypes[2].OneofWrappers = []any{}
	file_node_proto_msgTypes[5].OneofWrappers = []any{}
	file_node_proto_msgTypes[7].OneofWrappers = []any{
		(*GetNodeRequest_Id)(nil),
		(*GetNodeRequest_NodeQuery)(nil),
	}
	file_node_proto_msgTypes[8].OneofWrappers = []any{}
	file_node_proto_msgTypes[10].OneofWrappers = []any{
		(*UpdateNodeRequest_Id)(nil),
		(*UpdateNodeRequest_NodeQuery)(nil),
	}
	file_node_proto_msgTypes[12].OneofWrappers = []any{}
	file_node_proto_msgTypes[14].OneofWrappers = []any{}
	file_node_proto_msgTypes[15].OneofWrappers = []any{
		(*GetEndpointConfigRequest_Id)(nil),
		(*GetEndpointConfigRequest_EndpointConfigQuery)(nil),
	}
	file_node_proto_msgTypes[16].OneofWrappers = []any{}
	file_node_proto_msgTypes[18].OneofWrappers = []any{
		(*UpdateEndpointConfigRequest_Id)(nil),
		(*UpdateEndpointConfigRequest_EndpointConfigQuery)(nil),
	}
	file_node_proto_msgTypes[20].OneofWrappers = []any{}
	file_node_proto_msgTypes[21].OneofWrappers = []any{}
	file_node_proto_msgTypes[23].OneofWrappers = []any{
		(*GetGroupRequest_Id)(nil),
		(*GetGroupRequest_GroupQuery)(nil),
		(*GetGroupRequest_VersionSetId)(nil),
	}
	file_node_proto_msgTypes[24].OneofWrappers = []any{}
	file_node_proto_msgTypes[25].OneofWrappers = []any{}
	file_node_proto_msgTypes[27].OneofWrappers = []any{
		(*UpdateGroupRequest_Id)(nil),
		(*UpdateGroupRequest_GroupQuery)(nil),
	}
	file_node_proto_msgTypes[32].OneofWrappers = []any{
		(*GetHardwareConfigRequest_Id)(nil),
		(*GetHardwareConfigRequest_HardwareConfigQuery)(nil),
		(*GetHardwareConfigRequest_VersionSetId)(nil),
	}
	file_node_proto_msgTypes[34].OneofWrappers = []any{}
	file_node_proto_msgTypes[41].OneofWrappers = []any{
		(*GetProxyRequest_Id)(nil),
		(*GetProxyRequest_NameQuery)(nil),
		(*GetProxyRequest_SerialQuery)(nil),
		(*GetProxyRequest_VersionSetId)(nil),
	}
	file_node_proto_msgTypes[43].OneofWrappers = []any{
		(*UpdateProxyRequest_Id)(nil),
		(*UpdateProxyRequest_NameQuery)(nil),
	}
	file_node_proto_msgTypes[49].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_node_proto_rawDesc), len(file_node_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_node_proto_goTypes,
		DependencyIndexes: file_node_proto_depIdxs,
		EnumInfos:         file_node_proto_enumTypes,
		MessageInfos:      file_node_proto_msgTypes,
	}.Build()
	File_node_proto = out.File
	file_node_proto_goTypes = nil
	file_node_proto_depIdxs = nil
}
