// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: node.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Southbound_CreateNode_FullMethodName           = "/node.Southbound/CreateNode"
	Southbound_GetNode_FullMethodName              = "/node.Southbound/GetNode"
	Southbound_ListNodes_FullMethodName            = "/node.Southbound/ListNodes"
	Southbound_UpdateNode_FullMethodName           = "/node.Southbound/UpdateNode"
	Southbound_DeleteNode_FullMethodName           = "/node.Southbound/DeleteNode"
	Southbound_CreateEndpointConfig_FullMethodName = "/node.Southbound/CreateEndpointConfig"
	Southbound_GetEndpointConfig_FullMethodName    = "/node.Southbound/GetEndpointConfig"
	Southbound_ListEndpointConfigs_FullMethodName  = "/node.Southbound/ListEndpointConfigs"
	Southbound_UpdateEndpointConfig_FullMethodName = "/node.Southbound/UpdateEndpointConfig"
	Southbound_DeleteEndpointConfig_FullMethodName = "/node.Southbound/DeleteEndpointConfig"
	Southbound_CreateGroup_FullMethodName          = "/node.Southbound/CreateGroup"
	Southbound_GetGroup_FullMethodName             = "/node.Southbound/GetGroup"
	Southbound_ListGroups_FullMethodName           = "/node.Southbound/ListGroups"
	Southbound_UpdateGroup_FullMethodName          = "/node.Southbound/UpdateGroup"
	Southbound_DeleteGroup_FullMethodName          = "/node.Southbound/DeleteGroup"
	Southbound_CreateHardwareConfig_FullMethodName = "/node.Southbound/CreateHardwareConfig"
	Southbound_GetHardwareConfig_FullMethodName    = "/node.Southbound/GetHardwareConfig"
	Southbound_UpdateHardwareConfig_FullMethodName = "/node.Southbound/UpdateHardwareConfig"
	Southbound_DeleteHardwareConfig_FullMethodName = "/node.Southbound/DeleteHardwareConfig"
	Southbound_CreateVersionSet_FullMethodName     = "/node.Southbound/CreateVersionSet"
	Southbound_GetVersionSet_FullMethodName        = "/node.Southbound/GetVersionSet"
	Southbound_ListVersionSets_FullMethodName      = "/node.Southbound/ListVersionSets"
	Southbound_UpdateVersionSet_FullMethodName     = "/node.Southbound/UpdateVersionSet"
	Southbound_DeleteVersionSet_FullMethodName     = "/node.Southbound/DeleteVersionSet"
	Southbound_ActivateVersionSet_FullMethodName   = "/node.Southbound/ActivateVersionSet"
	Southbound_DisableVersionSet_FullMethodName    = "/node.Southbound/DisableVersionSet"
	Southbound_CreateProxy_FullMethodName          = "/node.Southbound/CreateProxy"
	Southbound_GetProxy_FullMethodName             = "/node.Southbound/GetProxy"
	Southbound_UpdateProxy_FullMethodName          = "/node.Southbound/UpdateProxy"
	Southbound_DeleteProxy_FullMethodName          = "/node.Southbound/DeleteProxy"
	Southbound_ActivateFleet_FullMethodName        = "/node.Southbound/ActivateFleet"
	Southbound_ActivateNode_FullMethodName         = "/node.Southbound/ActivateNode"
)

// SouthboundClient is the client API for Southbound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SouthboundClient interface {
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateEndpointConfig(ctx context.Context, in *CreateEndpointConfigRequest, opts ...grpc.CallOption) (*EndpointConfig, error)
	GetEndpointConfig(ctx context.Context, in *GetEndpointConfigRequest, opts ...grpc.CallOption) (*EndpointConfig, error)
	ListEndpointConfigs(ctx context.Context, in *ListEndpointConfigsRequest, opts ...grpc.CallOption) (*ListEndpointConfigsResponse, error)
	UpdateEndpointConfig(ctx context.Context, in *UpdateEndpointConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteEndpointConfig(ctx context.Context, in *DeleteEndpointConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateHardwareConfig(ctx context.Context, in *CreateHardwareConfigRequest, opts ...grpc.CallOption) (*HardwareConfigResponse, error)
	GetHardwareConfig(ctx context.Context, in *GetHardwareConfigRequest, opts ...grpc.CallOption) (*HardwareConfigResponse, error)
	UpdateHardwareConfig(ctx context.Context, in *UpdateHardwareConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteHardwareConfig(ctx context.Context, in *DeleteHardwareConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateVersionSet(ctx context.Context, in *CreateVersionSetRequest, opts ...grpc.CallOption) (*VersionSetResponse, error)
	GetVersionSet(ctx context.Context, in *GetVersionSetRequest, opts ...grpc.CallOption) (*VersionSetResponse, error)
	ListVersionSets(ctx context.Context, in *ListVersionSetsRequest, opts ...grpc.CallOption) (*ListVersionSetsResponse, error)
	UpdateVersionSet(ctx context.Context, in *UpdateVersionSetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteVersionSet(ctx context.Context, in *DeleteVersionSetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ActivateVersionSet(ctx context.Context, in *ActivateVersionSetRequest, opts ...grpc.CallOption) (*VersionSetResponse, error)
	DisableVersionSet(ctx context.Context, in *DisableVersionSetRequest, opts ...grpc.CallOption) (*VersionSetResponse, error)
	CreateProxy(ctx context.Context, in *CreateProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	GetProxy(ctx context.Context, in *GetProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	UpdateProxy(ctx context.Context, in *UpdateProxyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteProxy(ctx context.Context, in *DeleteProxyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ActivateFleet(ctx context.Context, in *ActivateFleetRequest, opts ...grpc.CallOption) (*ActivateResponse, error)
	ActivateNode(ctx context.Context, in *ActivateNodeRequest, opts ...grpc.CallOption) (*ActivateResponse, error)
}

type southboundClient struct {
	cc grpc.ClientConnInterface
}

func NewSouthboundClient(cc grpc.ClientConnInterface) SouthboundClient {
	return &southboundClient{cc}
}

func (c *southboundClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, Southbound_CreateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, Southbound_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, Southbound_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_UpdateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) CreateEndpointConfig(ctx context.Context, in *CreateEndpointConfigRequest, opts ...grpc.CallOption) (*EndpointConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndpointConfig)
	err := c.cc.Invoke(ctx, Southbound_CreateEndpointConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) GetEndpointConfig(ctx context.Context, in *GetEndpointConfigRequest, opts ...grpc.CallOption) (*EndpointConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndpointConfig)
	err := c.cc.Invoke(ctx, Southbound_GetEndpointConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) ListEndpointConfigs(ctx context.Context, in *ListEndpointConfigsRequest, opts ...grpc.CallOption) (*ListEndpointConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEndpointConfigsResponse)
	err := c.cc.Invoke(ctx, Southbound_ListEndpointConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) UpdateEndpointConfig(ctx context.Context, in *UpdateEndpointConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_UpdateEndpointConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) DeleteEndpointConfig(ctx context.Context, in *DeleteEndpointConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_DeleteEndpointConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, Southbound_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, Southbound_GetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, Southbound_ListGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_UpdateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_DeleteGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) CreateHardwareConfig(ctx context.Context, in *CreateHardwareConfigRequest, opts ...grpc.CallOption) (*HardwareConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HardwareConfigResponse)
	err := c.cc.Invoke(ctx, Southbound_CreateHardwareConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) GetHardwareConfig(ctx context.Context, in *GetHardwareConfigRequest, opts ...grpc.CallOption) (*HardwareConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HardwareConfigResponse)
	err := c.cc.Invoke(ctx, Southbound_GetHardwareConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) UpdateHardwareConfig(ctx context.Context, in *UpdateHardwareConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_UpdateHardwareConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) DeleteHardwareConfig(ctx context.Context, in *DeleteHardwareConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_DeleteHardwareConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) CreateVersionSet(ctx context.Context, in *CreateVersionSetRequest, opts ...grpc.CallOption) (*VersionSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionSetResponse)
	err := c.cc.Invoke(ctx, Southbound_CreateVersionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) GetVersionSet(ctx context.Context, in *GetVersionSetRequest, opts ...grpc.CallOption) (*VersionSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionSetResponse)
	err := c.cc.Invoke(ctx, Southbound_GetVersionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) ListVersionSets(ctx context.Context, in *ListVersionSetsRequest, opts ...grpc.CallOption) (*ListVersionSetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVersionSetsResponse)
	err := c.cc.Invoke(ctx, Southbound_ListVersionSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) UpdateVersionSet(ctx context.Context, in *UpdateVersionSetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_UpdateVersionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) DeleteVersionSet(ctx context.Context, in *DeleteVersionSetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_DeleteVersionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) ActivateVersionSet(ctx context.Context, in *ActivateVersionSetRequest, opts ...grpc.CallOption) (*VersionSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionSetResponse)
	err := c.cc.Invoke(ctx, Southbound_ActivateVersionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) DisableVersionSet(ctx context.Context, in *DisableVersionSetRequest, opts ...grpc.CallOption) (*VersionSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionSetResponse)
	err := c.cc.Invoke(ctx, Southbound_DisableVersionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) CreateProxy(ctx context.Context, in *CreateProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, Southbound_CreateProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) GetProxy(ctx context.Context, in *GetProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, Southbound_GetProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) UpdateProxy(ctx context.Context, in *UpdateProxyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_UpdateProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) DeleteProxy(ctx context.Context, in *DeleteProxyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Southbound_DeleteProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) ActivateFleet(ctx context.Context, in *ActivateFleetRequest, opts ...grpc.CallOption) (*ActivateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateResponse)
	err := c.cc.Invoke(ctx, Southbound_ActivateFleet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *southboundClient) ActivateNode(ctx context.Context, in *ActivateNodeRequest, opts ...grpc.CallOption) (*ActivateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateResponse)
	err := c.cc.Invoke(ctx, Southbound_ActivateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SouthboundServer is the server API for Southbound service.
// All implementations must embed UnimplementedSouthboundServer
// for forward compatibility.
type SouthboundServer interface {
	CreateNode(context.Context, *CreateNodeRequest) (*NodeResponse, error)
	GetNode(context.Context, *GetNodeRequest) (*NodeResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*empty.Empty, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*empty.Empty, error)
	CreateEndpointConfig(context.Context, *CreateEndpointConfigRequest) (*EndpointConfig, error)
	GetEndpointConfig(context.Context, *GetEndpointConfigRequest) (*EndpointConfig, error)
	ListEndpointConfigs(context.Context, *ListEndpointConfigsRequest) (*ListEndpointConfigsResponse, error)
	UpdateEndpointConfig(context.Context, *UpdateEndpointConfigRequest) (*empty.Empty, error)
	DeleteEndpointConfig(context.Context, *DeleteEndpointConfigRequest) (*empty.Empty, error)
	CreateGroup(context.Context, *CreateGroupRequest) (*GroupResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GroupResponse, error)
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*empty.Empty, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*empty.Empty, error)
	CreateHardwareConfig(context.Context, *CreateHardwareConfigRequest) (*HardwareConfigResponse, error)
	GetHardwareConfig(context.Context, *GetHardwareConfigRequest) (*HardwareConfigResponse, error)
	UpdateHardwareConfig(context.Context, *UpdateHardwareConfigRequest) (*empty.Empty, error)
	DeleteHardwareConfig(context.Context, *DeleteHardwareConfigRequest) (*empty.Empty, error)
	CreateVersionSet(context.Context, *CreateVersionSetRequest) (*VersionSetResponse, error)
	GetVersionSet(context.Context, *GetVersionSetRequest) (*VersionSetResponse, error)
	ListVersionSets(context.Context, *ListVersionSetsRequest) (*ListVersionSetsResponse, error)
	UpdateVersionSet(context.Context, *UpdateVersionSetRequest) (*empty.Empty, error)
	DeleteVersionSet(context.Context, *DeleteVersionSetRequest) (*empty.Empty, error)
	ActivateVersionSet(context.Context, *ActivateVersionSetRequest) (*VersionSetResponse, error)
	DisableVersionSet(context.Context, *DisableVersionSetRequest) (*VersionSetResponse, error)
	CreateProxy(context.Context, *CreateProxyRequest) (*ProxyResponse, error)
	GetProxy(context.Context, *GetProxyRequest) (*ProxyResponse, error)
	UpdateProxy(context.Context, *UpdateProxyRequest) (*empty.Empty, error)
	DeleteProxy(context.Context, *DeleteProxyRequest) (*empty.Empty, error)
	ActivateFleet(context.Context, *ActivateFleetRequest) (*ActivateResponse, error)
	ActivateNode(context.Context, *ActivateNodeRequest) (*ActivateResponse, error)
	mustEmbedUnimplementedSouthboundServer()
}

// UnimplementedSouthboundServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSouthboundServer struct{}

func (UnimplementedSouthboundServer) CreateNode(context.Context, *CreateNodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedSouthboundServer) GetNode(context.Context, *GetNodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedSouthboundServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedSouthboundServer) UpdateNode(context.Context, *UpdateNodeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedSouthboundServer) DeleteNode(context.Context, *DeleteNodeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedSouthboundServer) CreateEndpointConfig(context.Context, *CreateEndpointConfigRequest) (*EndpointConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointConfig not implemented")
}
func (UnimplementedSouthboundServer) GetEndpointConfig(context.Context, *GetEndpointConfigRequest) (*EndpointConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointConfig not implemented")
}
func (UnimplementedSouthboundServer) ListEndpointConfigs(context.Context, *ListEndpointConfigsRequest) (*ListEndpointConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpointConfigs not implemented")
}
func (UnimplementedSouthboundServer) UpdateEndpointConfig(context.Context, *UpdateEndpointConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpointConfig not implemented")
}
func (UnimplementedSouthboundServer) DeleteEndpointConfig(context.Context, *DeleteEndpointConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpointConfig not implemented")
}
func (UnimplementedSouthboundServer) CreateGroup(context.Context, *CreateGroupRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedSouthboundServer) GetGroup(context.Context, *GetGroupRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedSouthboundServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedSouthboundServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedSouthboundServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedSouthboundServer) CreateHardwareConfig(context.Context, *CreateHardwareConfigRequest) (*HardwareConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHardwareConfig not implemented")
}
func (UnimplementedSouthboundServer) GetHardwareConfig(context.Context, *GetHardwareConfigRequest) (*HardwareConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareConfig not implemented")
}
func (UnimplementedSouthboundServer) UpdateHardwareConfig(context.Context, *UpdateHardwareConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHardwareConfig not implemented")
}
func (UnimplementedSouthboundServer) DeleteHardwareConfig(context.Context, *DeleteHardwareConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHardwareConfig not implemented")
}
func (UnimplementedSouthboundServer) CreateVersionSet(context.Context, *CreateVersionSetRequest) (*VersionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVersionSet not implemented")
}
func (UnimplementedSouthboundServer) GetVersionSet(context.Context, *GetVersionSetRequest) (*VersionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionSet not implemented")
}
func (UnimplementedSouthboundServer) ListVersionSets(context.Context, *ListVersionSetsRequest) (*ListVersionSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersionSets not implemented")
}
func (UnimplementedSouthboundServer) UpdateVersionSet(context.Context, *UpdateVersionSetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVersionSet not implemented")
}
func (UnimplementedSouthboundServer) DeleteVersionSet(context.Context, *DeleteVersionSetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVersionSet not implemented")
}
func (UnimplementedSouthboundServer) ActivateVersionSet(context.Context, *ActivateVersionSetRequest) (*VersionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateVersionSet not implemented")
}
func (UnimplementedSouthboundServer) DisableVersionSet(context.Context, *DisableVersionSetRequest) (*VersionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVersionSet not implemented")
}
func (UnimplementedSouthboundServer) CreateProxy(context.Context, *CreateProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProxy not implemented")
}
func (UnimplementedSouthboundServer) GetProxy(context.Context, *GetProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProxy not implemented")
}
func (UnimplementedSouthboundServer) UpdateProxy(context.Context, *UpdateProxyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProxy not implemented")
}
func (UnimplementedSouthboundServer) DeleteProxy(context.Context, *DeleteProxyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProxy not implemented")
}
func (UnimplementedSouthboundServer) ActivateFleet(context.Context, *ActivateFleetRequest) (*ActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateFleet not implemented")
}
func (UnimplementedSouthboundServer) ActivateNode(context.Context, *ActivateNodeRequest) (*ActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateNode not implemented")
}
func (UnimplementedSouthboundServer) mustEmbedUnimplementedSouthboundServer() {}
func (UnimplementedSouthboundServer) testEmbeddedByValue()                    {}

// UnsafeSouthboundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SouthboundServer will
// result in compilation errors.
type UnsafeSouthboundServer interface {
	mustEmbedUnimplementedSouthboundServer()
}

func RegisterSouthboundServer(s grpc.ServiceRegistrar, srv SouthboundServer) {
	// If the following call pancis, it indicates UnimplementedSouthboundServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Southbound_ServiceDesc, srv)
}

func _Southbound_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_CreateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_UpdateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_CreateEndpointConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).CreateEndpointConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_CreateEndpointConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).CreateEndpointConfig(ctx, req.(*CreateEndpointConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_GetEndpointConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).GetEndpointConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_GetEndpointConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).GetEndpointConfig(ctx, req.(*GetEndpointConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_ListEndpointConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndpointConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).ListEndpointConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_ListEndpointConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).ListEndpointConfigs(ctx, req.(*ListEndpointConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_UpdateEndpointConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).UpdateEndpointConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_UpdateEndpointConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).UpdateEndpointConfig(ctx, req.(*UpdateEndpointConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_DeleteEndpointConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEndpointConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).DeleteEndpointConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_DeleteEndpointConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).DeleteEndpointConfig(ctx, req.(*DeleteEndpointConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_CreateHardwareConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHardwareConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).CreateHardwareConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_CreateHardwareConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).CreateHardwareConfig(ctx, req.(*CreateHardwareConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_GetHardwareConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHardwareConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).GetHardwareConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_GetHardwareConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).GetHardwareConfig(ctx, req.(*GetHardwareConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_UpdateHardwareConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHardwareConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).UpdateHardwareConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_UpdateHardwareConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).UpdateHardwareConfig(ctx, req.(*UpdateHardwareConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_DeleteHardwareConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHardwareConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).DeleteHardwareConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_DeleteHardwareConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).DeleteHardwareConfig(ctx, req.(*DeleteHardwareConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_CreateVersionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVersionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).CreateVersionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_CreateVersionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).CreateVersionSet(ctx, req.(*CreateVersionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_GetVersionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).GetVersionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_GetVersionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).GetVersionSet(ctx, req.(*GetVersionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_ListVersionSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).ListVersionSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_ListVersionSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).ListVersionSets(ctx, req.(*ListVersionSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_UpdateVersionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).UpdateVersionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_UpdateVersionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).UpdateVersionSet(ctx, req.(*UpdateVersionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_DeleteVersionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).DeleteVersionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_DeleteVersionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).DeleteVersionSet(ctx, req.(*DeleteVersionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_ActivateVersionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateVersionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).ActivateVersionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_ActivateVersionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).ActivateVersionSet(ctx, req.(*ActivateVersionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_DisableVersionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableVersionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).DisableVersionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_DisableVersionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).DisableVersionSet(ctx, req.(*DisableVersionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_CreateProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).CreateProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_CreateProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).CreateProxy(ctx, req.(*CreateProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_GetProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).GetProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_GetProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).GetProxy(ctx, req.(*GetProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_UpdateProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).UpdateProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_UpdateProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).UpdateProxy(ctx, req.(*UpdateProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_DeleteProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).DeleteProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_DeleteProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).DeleteProxy(ctx, req.(*DeleteProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_ActivateFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).ActivateFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_ActivateFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).ActivateFleet(ctx, req.(*ActivateFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Southbound_ActivateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SouthboundServer).ActivateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Southbound_ActivateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SouthboundServer).ActivateNode(ctx, req.(*ActivateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Southbound_ServiceDesc is the grpc.ServiceDesc for Southbound service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Southbound_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.Southbound",
	HandlerType: (*SouthboundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _Southbound_CreateNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Southbound_GetNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Southbound_ListNodes_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _Southbound_UpdateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Southbound_DeleteNode_Handler,
		},
		{
			MethodName: "CreateEndpointConfig",
			Handler:    _Southbound_CreateEndpointConfig_Handler,
		},
		{
			MethodName: "GetEndpointConfig",
			Handler:    _Southbound_GetEndpointConfig_Handler,
		},
		{
			MethodName: "ListEndpointConfigs",
			Handler:    _Southbound_ListEndpointConfigs_Handler,
		},
		{
			MethodName: "UpdateEndpointConfig",
			Handler:    _Southbound_UpdateEndpointConfig_Handler,
		},
		{
			MethodName: "DeleteEndpointConfig",
			Handler:    _Southbound_DeleteEndpointConfig_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Southbound_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Southbound_GetGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _Southbound_ListGroups_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Southbound_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Southbound_DeleteGroup_Handler,
		},
		{
			MethodName: "CreateHardwareConfig",
			Handler:    _Southbound_CreateHardwareConfig_Handler,
		},
		{
			MethodName: "GetHardwareConfig",
			Handler:    _Southbound_GetHardwareConfig_Handler,
		},
		{
			MethodName: "UpdateHardwareConfig",
			Handler:    _Southbound_UpdateHardwareConfig_Handler,
		},
		{
			MethodName: "DeleteHardwareConfig",
			Handler:    _Southbound_DeleteHardwareConfig_Handler,
		},
		{
			MethodName: "CreateVersionSet",
			Handler:    _Southbound_CreateVersionSet_Handler,
		},
		{
			MethodName: "GetVersionSet",
			Handler:    _Southbound_GetVersionSet_Handler,
		},
		{
			MethodName: "ListVersionSets",
			Handler:    _Southbound_ListVersionSets_Handler,
		},
		{
			MethodName: "UpdateVersionSet",
			Handler:    _Southbound_UpdateVersionSet_Handler,
		},
		{
			MethodName: "DeleteVersionSet",
			Handler:    _Southbound_DeleteVersionSet_Handler,
		},
		{
			MethodName: "ActivateVersionSet",
			Handler:    _Southbound_ActivateVersionSet_Handler,
		},
		{
			MethodName: "DisableVersionSet",
			Handler:    _Southbound_DisableVersionSet_Handler,
		},
		{
			MethodName: "CreateProxy",
			Handler:    _Southbound_CreateProxy_Handler,
		},
		{
			MethodName: "GetProxy",
			Handler:    _Southbound_GetProxy_Handler,
		},
		{
			MethodName: "UpdateProxy",
			Handler:    _Southbound_UpdateProxy_Handler,
		},
		{
			MethodName: "DeleteProxy",
			Handler:    _Southbound_DeleteProxy_Handler,
		},
		{
			MethodName: "ActivateFleet",
			Handler:    _Southbound_ActivateFleet_Handler,
		},
		{
			MethodName: "ActivateNode",
			Handler:    _Southbound_ActivateNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
