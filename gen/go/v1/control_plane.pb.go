// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.12.4
// source: control_plane.proto

package v1

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateState int32

const (
	UpdateState_UPDATE_ERROR        UpdateState = 0
	UpdateState_UPDATE_ROLLBACK     UpdateState = 1
	UpdateState_UPDATE_APPLICABLE   UpdateState = 2
	UpdateState_UPDATE_APPLY_REQ    UpdateState = 3
	UpdateState_UPDATE_APPLIED      UpdateState = 4
	UpdateState_UPDATE_ACKNOWLEDGED UpdateState = 5
	UpdateState_UPDATE_PUBLISHED    UpdateState = 6
)

// Enum value maps for UpdateState.
var (
	UpdateState_name = map[int32]string{
		0: "UPDATE_ERROR",
		1: "UPDATE_ROLLBACK",
		2: "UPDATE_APPLICABLE",
		3: "UPDATE_APPLY_REQ",
		4: "UPDATE_APPLIED",
		5: "UPDATE_ACKNOWLEDGED",
		6: "UPDATE_PUBLISHED",
	}
	UpdateState_value = map[string]int32{
		"UPDATE_ERROR":        0,
		"UPDATE_ROLLBACK":     1,
		"UPDATE_APPLICABLE":   2,
		"UPDATE_APPLY_REQ":    3,
		"UPDATE_APPLIED":      4,
		"UPDATE_ACKNOWLEDGED": 5,
		"UPDATE_PUBLISHED":    6,
	}
)

func (x UpdateState) Enum() *UpdateState {
	p := new(UpdateState)
	*p = x
	return p
}

func (x UpdateState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateState) Descriptor() protoreflect.EnumDescriptor {
	return file_control_plane_proto_enumTypes[0].Descriptor()
}

func (UpdateState) Type() protoreflect.EnumType {
	return &file_control_plane_proto_enumTypes[0]
}

func (x UpdateState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateState.Descriptor instead.
func (UpdateState) EnumDescriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{0}
}

type Transaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxId          int32                  `protobuf:"varint,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_control_plane_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetTxId() int32 {
	if x != nil {
		return x.TxId
	}
	return 0
}

type NodeUpdate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NodeUpdateItem *NodeUpdateItem        `protobuf:"bytes,1,opt,name=node_update_item,json=nodeUpdateItem,proto3" json:"node_update_item,omitempty"`
	Transaction    *Transaction           `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NodeUpdate) Reset() {
	*x = NodeUpdate{}
	mi := &file_control_plane_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeUpdate) ProtoMessage() {}

func (x *NodeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeUpdate.ProtoReflect.Descriptor instead.
func (*NodeUpdate) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{1}
}

func (x *NodeUpdate) GetNodeUpdateItem() *NodeUpdateItem {
	if x != nil {
		return x.NodeUpdateItem
	}
	return nil
}

func (x *NodeUpdate) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type NodeUpdateItem struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber     string                 `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	NetworkIndex     int32                  `protobuf:"varint,3,opt,name=network_index,json=networkIndex,proto3" json:"network_index,omitempty"`
	Locality         string                 `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	VersionSetId     string                 `protobuf:"bytes,5,opt,name=version_set_id,json=versionSetId,proto3" json:"version_set_id,omitempty"`
	HardwareConfig   []*HardwareConfig      `protobuf:"bytes,6,rep,name=hardware_config,json=hardwareConfig,proto3" json:"hardware_config,omitempty"`
	GroupProxyUpdate []*GroupProxyUpdate    `protobuf:"bytes,7,rep,name=group_proxy_update,json=groupProxyUpdate,proto3" json:"group_proxy_update,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NodeUpdateItem) Reset() {
	*x = NodeUpdateItem{}
	mi := &file_control_plane_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeUpdateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeUpdateItem) ProtoMessage() {}

func (x *NodeUpdateItem) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeUpdateItem.ProtoReflect.Descriptor instead.
func (*NodeUpdateItem) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{2}
}

func (x *NodeUpdateItem) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *NodeUpdateItem) GetNetworkIndex() int32 {
	if x != nil {
		return x.NetworkIndex
	}
	return 0
}

func (x *NodeUpdateItem) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *NodeUpdateItem) GetVersionSetId() string {
	if x != nil {
		return x.VersionSetId
	}
	return ""
}

func (x *NodeUpdateItem) GetHardwareConfig() []*HardwareConfig {
	if x != nil {
		return x.HardwareConfig
	}
	return nil
}

func (x *NodeUpdateItem) GetGroupProxyUpdate() []*GroupProxyUpdate {
	if x != nil {
		return x.GroupProxyUpdate
	}
	return nil
}

type UpdateProxy struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServerEndpointAddr string                 `protobuf:"bytes,2,opt,name=server_endpoint_addr,json=serverEndpointAddr,proto3" json:"server_endpoint_addr,omitempty"`
	ClientEndpointAddr string                 `protobuf:"bytes,3,opt,name=client_endpoint_addr,json=clientEndpointAddr,proto3" json:"client_endpoint_addr,omitempty"`
	ProxyType          ProxyType              `protobuf:"varint,4,opt,name=proxy_type,json=proxyType,proto3,enum=node.ProxyType" json:"proxy_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateProxy) Reset() {
	*x = UpdateProxy{}
	mi := &file_control_plane_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProxy) ProtoMessage() {}

func (x *UpdateProxy) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProxy.ProtoReflect.Descriptor instead.
func (*UpdateProxy) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateProxy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProxy) GetServerEndpointAddr() string {
	if x != nil {
		return x.ServerEndpointAddr
	}
	return ""
}

func (x *UpdateProxy) GetClientEndpointAddr() string {
	if x != nil {
		return x.ClientEndpointAddr
	}
	return ""
}

func (x *UpdateProxy) GetProxyType() ProxyType {
	if x != nil {
		return x.ProxyType
	}
	return ProxyType_PROXY_TYPE_UNSPECIFIED
}

type GroupProxyUpdate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	GroupName      string                 `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	EndpointConfig *EndpointConfig        `protobuf:"bytes,2,opt,name=endpoint_config,json=endpointConfig,proto3" json:"endpoint_config,omitempty"`
	LegacyConfig   *EndpointConfig        `protobuf:"bytes,3,opt,name=legacy_config,json=legacyConfig,proto3,oneof" json:"legacy_config,omitempty"`
	GroupLogLevel  int32                  `protobuf:"varint,4,opt,name=group_log_level,json=groupLogLevel,proto3" json:"group_log_level,omitempty"`
	Proxies        []*UpdateProxy         `protobuf:"bytes,5,rep,name=proxies,proto3" json:"proxies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GroupProxyUpdate) Reset() {
	*x = GroupProxyUpdate{}
	mi := &file_control_plane_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupProxyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupProxyUpdate) ProtoMessage() {}

func (x *GroupProxyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupProxyUpdate.ProtoReflect.Descriptor instead.
func (*GroupProxyUpdate) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{4}
}

func (x *GroupProxyUpdate) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupProxyUpdate) GetEndpointConfig() *EndpointConfig {
	if x != nil {
		return x.EndpointConfig
	}
	return nil
}

func (x *GroupProxyUpdate) GetLegacyConfig() *EndpointConfig {
	if x != nil {
		return x.LegacyConfig
	}
	return nil
}

func (x *GroupProxyUpdate) GetGroupLogLevel() int32 {
	if x != nil {
		return x.GroupLogLevel
	}
	return 0
}

func (x *GroupProxyUpdate) GetProxies() []*UpdateProxy {
	if x != nil {
		return x.Proxies
	}
	return nil
}

type FleetUpdate struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Transaction     *Transaction           `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	NodeUpdateItems []*NodeUpdateItem      `protobuf:"bytes,2,rep,name=node_update_items,json=nodeUpdateItems,proto3" json:"node_update_items,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FleetUpdate) Reset() {
	*x = FleetUpdate{}
	mi := &file_control_plane_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FleetUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleetUpdate) ProtoMessage() {}

func (x *FleetUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleetUpdate.ProtoReflect.Descriptor instead.
func (*FleetUpdate) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{5}
}

func (x *FleetUpdate) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *FleetUpdate) GetNodeUpdateItems() []*NodeUpdateItem {
	if x != nil {
		return x.NodeUpdateItems
	}
	return nil
}

type UpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpdateState   UpdateState            `protobuf:"varint,1,opt,name=update_state,json=updateState,proto3,enum=control_service.UpdateState" json:"update_state,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Meta          *_struct.Struct        `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	TxId          int32                  `protobuf:"varint,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	NodeId        string                 `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	mi := &file_control_plane_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateResponse) GetUpdateState() UpdateState {
	if x != nil {
		return x.UpdateState
	}
	return UpdateState_UPDATE_ERROR
}

func (x *UpdateResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UpdateResponse) GetMeta() *_struct.Struct {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UpdateResponse) GetTxId() int32 {
	if x != nil {
		return x.TxId
	}
	return 0
}

func (x *UpdateResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type FleetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpdateState   UpdateState            `protobuf:"varint,1,opt,name=update_state,json=updateState,proto3,enum=control_service.UpdateState" json:"update_state,omitempty"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Meta          string                 `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
	TxId          int32                  `protobuf:"varint,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FleetResponse) Reset() {
	*x = FleetResponse{}
	mi := &file_control_plane_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FleetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleetResponse) ProtoMessage() {}

func (x *FleetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FleetResponse.ProtoReflect.Descriptor instead.
func (*FleetResponse) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{7}
}

func (x *FleetResponse) GetUpdateState() UpdateState {
	if x != nil {
		return x.UpdateState
	}
	return UpdateState_UPDATE_ERROR
}

func (x *FleetResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FleetResponse) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *FleetResponse) GetTxId() int32 {
	if x != nil {
		return x.TxId
	}
	return 0
}

type HelloResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber  string                 `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	mi := &file_control_plane_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{8}
}

func (x *HelloResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type LogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	SerialNumber  string                 `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Level         *int32                 `protobuf:"varint,3,opt,name=level,proto3,oneof" json:"level,omitempty"`
	Module        *string                `protobuf:"bytes,4,opt,name=module,proto3,oneof" json:"module,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_control_plane_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_control_plane_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_control_plane_proto_rawDescGZIP(), []int{9}
}

func (x *LogResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *LogResponse) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *LogResponse) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

var File_control_plane_proto protoreflect.FileDescriptor

var file_control_plane_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x49, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x02, 0x0a,
	0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x12, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x65,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xb3,
	0x01, 0x0a, 0x0d, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2a, 0xa4, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c,
	0x45, 0x44, 0x47, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x06, 0x32, 0xad, 0x02,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6c,
	0x65, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6c, 0x65, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x05, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3d,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x30, 0x5a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x69, 0x6c,
	0x73, 0x6c, 0x6f, 0x6c, 0x2f, 0x6b, 0x72, 0x69, 0x74, 0x69, 0x73, 0x33, 0x6d, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_control_plane_proto_rawDescOnce sync.Once
	file_control_plane_proto_rawDescData []byte
)

func file_control_plane_proto_rawDescGZIP() []byte {
	file_control_plane_proto_rawDescOnce.Do(func() {
		file_control_plane_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_control_plane_proto_rawDesc), len(file_control_plane_proto_rawDesc)))
	})
	return file_control_plane_proto_rawDescData
}

var file_control_plane_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_control_plane_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_control_plane_proto_goTypes = []any{
	(UpdateState)(0),            // 0: control_service.UpdateState
	(*Transaction)(nil),         // 1: control_service.Transaction
	(*NodeUpdate)(nil),          // 2: control_service.NodeUpdate
	(*NodeUpdateItem)(nil),      // 3: control_service.NodeUpdateItem
	(*UpdateProxy)(nil),         // 4: control_service.UpdateProxy
	(*GroupProxyUpdate)(nil),    // 5: control_service.GroupProxyUpdate
	(*FleetUpdate)(nil),         // 6: control_service.FleetUpdate
	(*UpdateResponse)(nil),      // 7: control_service.UpdateResponse
	(*FleetResponse)(nil),       // 8: control_service.FleetResponse
	(*HelloResponse)(nil),       // 9: control_service.HelloResponse
	(*LogResponse)(nil),         // 10: control_service.LogResponse
	(*HardwareConfig)(nil),      // 11: node.HardwareConfig
	(ProxyType)(0),              // 12: node.ProxyType
	(*EndpointConfig)(nil),      // 13: node.EndpointConfig
	(*timestamp.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(*_struct.Struct)(nil),      // 15: google.protobuf.Struct
	(*empty.Empty)(nil),         // 16: google.protobuf.Empty
}
var file_control_plane_proto_depIdxs = []int32{
	3,  // 0: control_service.NodeUpdate.node_update_item:type_name -> control_service.NodeUpdateItem
	1,  // 1: control_service.NodeUpdate.transaction:type_name -> control_service.Transaction
	11, // 2: control_service.NodeUpdateItem.hardware_config:type_name -> node.HardwareConfig
	5,  // 3: control_service.NodeUpdateItem.group_proxy_update:type_name -> control_service.GroupProxyUpdate
	12, // 4: control_service.UpdateProxy.proxy_type:type_name -> node.ProxyType
	13, // 5: control_service.GroupProxyUpdate.endpoint_config:type_name -> node.EndpointConfig
	13, // 6: control_service.GroupProxyUpdate.legacy_config:type_name -> node.EndpointConfig
	4,  // 7: control_service.GroupProxyUpdate.proxies:type_name -> control_service.UpdateProxy
	1,  // 8: control_service.FleetUpdate.transaction:type_name -> control_service.Transaction
	3,  // 9: control_service.FleetUpdate.node_update_items:type_name -> control_service.NodeUpdateItem
	0,  // 10: control_service.UpdateResponse.update_state:type_name -> control_service.UpdateState
	14, // 11: control_service.UpdateResponse.timestamp:type_name -> google.protobuf.Timestamp
	15, // 12: control_service.UpdateResponse.meta:type_name -> google.protobuf.Struct
	0,  // 13: control_service.FleetResponse.update_state:type_name -> control_service.UpdateState
	14, // 14: control_service.FleetResponse.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 15: control_service.ControlPlane.UpdateNode:input_type -> control_service.NodeUpdate
	6,  // 16: control_service.ControlPlane.UpdateFleet:input_type -> control_service.FleetUpdate
	16, // 17: control_service.ControlPlane.hello:input_type -> google.protobuf.Empty
	16, // 18: control_service.ControlPlane.log:input_type -> google.protobuf.Empty
	7,  // 19: control_service.ControlPlane.UpdateNode:output_type -> control_service.UpdateResponse
	8,  // 20: control_service.ControlPlane.UpdateFleet:output_type -> control_service.FleetResponse
	9,  // 21: control_service.ControlPlane.hello:output_type -> control_service.HelloResponse
	10, // 22: control_service.ControlPlane.log:output_type -> control_service.LogResponse
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_control_plane_proto_init() }
func file_control_plane_proto_init() {
	if File_control_plane_proto != nil {
		return
	}
	file_node_proto_init()
	file_control_plane_proto_msgTypes[4].OneofWrappers = []any{}
	file_control_plane_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_control_plane_proto_rawDesc), len(file_control_plane_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_control_plane_proto_goTypes,
		DependencyIndexes: file_control_plane_proto_depIdxs,
		EnumInfos:         file_control_plane_proto_enumTypes,
		MessageInfos:      file_control_plane_proto_msgTypes,
	}.Build()
	File_control_plane_proto = out.File
	file_control_plane_proto_goTypes = nil
	file_control_plane_proto_depIdxs = nil
}
